### YamlMime:ManagedReference
items:
- uid: RobotComponents.Kinematics.PathGenerator
  commentId: T:RobotComponents.Kinematics.PathGenerator
  id: PathGenerator
  parent: RobotComponents.Kinematics
  children:
  - RobotComponents.Kinematics.PathGenerator.#ctor
  - RobotComponents.Kinematics.PathGenerator.#ctor(RobotComponents.Definitions.Robot)
  - RobotComponents.Kinematics.PathGenerator.Calculate(System.Collections.Generic.List{RobotComponents.Actions.Action},System.Int32)
  - RobotComponents.Kinematics.PathGenerator.ErrorText
  - RobotComponents.Kinematics.PathGenerator.ExternalJointPositions
  - RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ
  - RobotComponents.Kinematics.PathGenerator.IsValid
  - RobotComponents.Kinematics.PathGenerator.Movements
  - RobotComponents.Kinematics.PathGenerator.Paths
  - RobotComponents.Kinematics.PathGenerator.Planes
  - RobotComponents.Kinematics.PathGenerator.Robot
  - RobotComponents.Kinematics.PathGenerator.RobotJointPositions
  - RobotComponents.Kinematics.PathGenerator.ToString
  langs:
  - csharp
  - vb
  name: PathGenerator
  nameWithType: PathGenerator
  fullName: RobotComponents.Kinematics.PathGenerator
  type: Class
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nRepresent the Path Generator.\nThis class is used to approximate of the path the Robot will follow for a given set of Actions. \nSpeed Datas and Zone Datas are neglected. \n"
  syntax:
    content: public class PathGenerator
    content.vb: Public Class PathGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: RobotComponents.Kinematics.PathGenerator.#ctor
  commentId: M:RobotComponents.Kinematics.PathGenerator.#ctor
  id: '#ctor'
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: PathGenerator()
  nameWithType: PathGenerator.PathGenerator()
  fullName: RobotComponents.Kinematics.PathGenerator.PathGenerator()
  type: Constructor
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nInitializes an empty instance of the Path Generator class.\n"
  syntax:
    content: public PathGenerator()
    content.vb: Public Sub New
  overload: RobotComponents.Kinematics.PathGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Kinematics.PathGenerator.#ctor(RobotComponents.Definitions.Robot)
  commentId: M:RobotComponents.Kinematics.PathGenerator.#ctor(RobotComponents.Definitions.Robot)
  id: '#ctor(RobotComponents.Definitions.Robot)'
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: PathGenerator(Robot)
  nameWithType: PathGenerator.PathGenerator(Robot)
  fullName: RobotComponents.Kinematics.PathGenerator.PathGenerator(RobotComponents.Definitions.Robot)
  type: Constructor
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nInitializes a new instance of the Path Generator class.\n"
  syntax:
    content: public PathGenerator(Robot robot)
    parameters:
    - id: robot
      type: RobotComponents.Definitions.Robot
      description: 'The Robot to generate the path for. '
    content.vb: Public Sub New(robot As Robot)
  overload: RobotComponents.Kinematics.PathGenerator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Kinematics.PathGenerator.ToString
  commentId: M:RobotComponents.Kinematics.PathGenerator.ToString
  id: ToString
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PathGenerator.ToString()
  fullName: RobotComponents.Kinematics.PathGenerator.ToString()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nReturns a string that represents the current object.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: 'A string that represents the current object. '
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: RobotComponents.Kinematics.PathGenerator.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: RobotComponents.Kinematics.PathGenerator.Calculate(System.Collections.Generic.List{RobotComponents.Actions.Action},System.Int32)
  commentId: M:RobotComponents.Kinematics.PathGenerator.Calculate(System.Collections.Generic.List{RobotComponents.Actions.Action},System.Int32)
  id: Calculate(System.Collections.Generic.List{RobotComponents.Actions.Action},System.Int32)
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: Calculate(List<Action>, Int32)
  nameWithType: PathGenerator.Calculate(List<Action>, Int32)
  fullName: RobotComponents.Kinematics.PathGenerator.Calculate(System.Collections.Generic.List<RobotComponents.Actions.Action>, System.Int32)
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nCalculates the path from a list with Actions.\n"
  syntax:
    content: public void Calculate(List<Action> actions, int interpolations)
    parameters:
    - id: actions
      type: System.Collections.Generic.List{RobotComponents.Actions.Action}
      description: 'The list with Actions. '
    - id: interpolations
      type: System.Int32
      description: 'The amount of interpolations between two targets. '
    content.vb: Public Sub Calculate(actions As List(Of Action), interpolations As Integer)
  overload: RobotComponents.Kinematics.PathGenerator.Calculate*
  nameWithType.vb: PathGenerator.Calculate(List(Of Action), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RobotComponents.Kinematics.PathGenerator.Calculate(System.Collections.Generic.List(Of RobotComponents.Actions.Action), System.Int32)
  name.vb: Calculate(List(Of Action), Int32)
- uid: RobotComponents.Kinematics.PathGenerator.IsValid
  commentId: P:RobotComponents.Kinematics.PathGenerator.IsValid
  id: IsValid
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: PathGenerator.IsValid
  fullName: RobotComponents.Kinematics.PathGenerator.IsValid
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets a value indicating whether or not the object is valid.\n"
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: RobotComponents.Kinematics.PathGenerator.IsValid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.Robot
  commentId: P:RobotComponents.Kinematics.PathGenerator.Robot
  id: Robot
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: Robot
  nameWithType: PathGenerator.Robot
  fullName: RobotComponents.Kinematics.PathGenerator.Robot
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets or sets the Robot.\n"
  syntax:
    content: public Robot Robot { get; }
    parameters: []
    return:
      type: RobotComponents.Definitions.Robot
    content.vb: Public ReadOnly Property Robot As Robot
  overload: RobotComponents.Kinematics.PathGenerator.Robot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.Planes
  commentId: P:RobotComponents.Kinematics.PathGenerator.Planes
  id: Planes
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: Planes
  nameWithType: PathGenerator.Planes
  fullName: RobotComponents.Kinematics.PathGenerator.Planes
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets the list with TCP planes the path follows.\n"
  syntax:
    content: public List<Plane> Planes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Rhino.Geometry.Plane}
    content.vb: Public ReadOnly Property Planes As List(Of Plane)
  overload: RobotComponents.Kinematics.PathGenerator.Planes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.Paths
  commentId: P:RobotComponents.Kinematics.PathGenerator.Paths
  id: Paths
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: Paths
  nameWithType: PathGenerator.Paths
  fullName: RobotComponents.Kinematics.PathGenerator.Paths
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets the path curve as list with curve.\nFor every move instruction a curve is constructed. \n"
  syntax:
    content: public List<Curve> Paths { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Rhino.Geometry.Curve}
    content.vb: Public ReadOnly Property Paths As List(Of Curve)
  overload: RobotComponents.Kinematics.PathGenerator.Paths*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.Movements
  commentId: P:RobotComponents.Kinematics.PathGenerator.Movements
  id: Movements
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: Movements
  nameWithType: PathGenerator.Movements
  fullName: RobotComponents.Kinematics.PathGenerator.Movements
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets the calculated Movements.\n"
  syntax:
    content: public List<Movement> Movements { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{RobotComponents.Actions.Movement}
    content.vb: Public ReadOnly Property Movements As List(Of Movement)
  overload: RobotComponents.Kinematics.PathGenerator.Movements*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.RobotJointPositions
  commentId: P:RobotComponents.Kinematics.PathGenerator.RobotJointPositions
  id: RobotJointPositions
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: RobotJointPositions
  nameWithType: PathGenerator.RobotJointPositions
  fullName: RobotComponents.Kinematics.PathGenerator.RobotJointPositions
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets the calculated Robot Joint Position.\n"
  syntax:
    content: public List<RobotJointPosition> RobotJointPositions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{RobotComponents.Actions.RobotJointPosition}
    content.vb: Public ReadOnly Property RobotJointPositions As List(Of RobotJointPosition)
  overload: RobotComponents.Kinematics.PathGenerator.RobotJointPositions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.ExternalJointPositions
  commentId: P:RobotComponents.Kinematics.PathGenerator.ExternalJointPositions
  id: ExternalJointPositions
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: ExternalJointPositions
  nameWithType: PathGenerator.ExternalJointPositions
  fullName: RobotComponents.Kinematics.PathGenerator.ExternalJointPositions
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets the calculated External Joint Positions. \n"
  syntax:
    content: public List<ExternalJointPosition> ExternalJointPositions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{RobotComponents.Actions.ExternalJointPosition}
    content.vb: Public ReadOnly Property ExternalJointPositions As List(Of ExternalJointPosition)
  overload: RobotComponents.Kinematics.PathGenerator.ExternalJointPositions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.ErrorText
  commentId: P:RobotComponents.Kinematics.PathGenerator.ErrorText
  id: ErrorText
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: ErrorText
  nameWithType: PathGenerator.ErrorText
  fullName: RobotComponents.Kinematics.PathGenerator.ErrorText
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets the collected error messages.\n"
  syntax:
    content: public List<string> ErrorText { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property ErrorText As List(Of String)
  overload: RobotComponents.Kinematics.PathGenerator.ErrorText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ
  commentId: P:RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ
  id: FirstMovementIsMoveAbsJ
  parent: RobotComponents.Kinematics.PathGenerator
  langs:
  - csharp
  - vb
  name: FirstMovementIsMoveAbsJ
  nameWithType: PathGenerator.FirstMovementIsMoveAbsJ
  fullName: RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Kinematics
  summary: "\nGets a value indicating whether or not the first movement is an Absolute Joint Movement.\n"
  syntax:
    content: public bool FirstMovementIsMoveAbsJ { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property FirstMovementIsMoveAbsJ As Boolean
  overload: RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: RobotComponents.Kinematics
  commentId: N:RobotComponents.Kinematics
  isExternal: true
  name: RobotComponents.Kinematics
  nameWithType: RobotComponents.Kinematics
  fullName: RobotComponents.Kinematics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RobotComponents.Kinematics.PathGenerator.#ctor*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.#ctor
  isExternal: true
  name: PathGenerator
  nameWithType: PathGenerator.PathGenerator
  fullName: RobotComponents.Kinematics.PathGenerator.PathGenerator
- uid: RobotComponents.Definitions.Robot
  commentId: T:RobotComponents.Definitions.Robot
  parent: RobotComponents.Definitions
  isExternal: true
  name: Robot
  nameWithType: Robot
  fullName: RobotComponents.Definitions.Robot
- uid: RobotComponents.Definitions
  commentId: N:RobotComponents.Definitions
  isExternal: true
  name: RobotComponents.Definitions
  nameWithType: RobotComponents.Definitions
  fullName: RobotComponents.Definitions
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Kinematics.PathGenerator.ToString*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.ToString
  isExternal: true
  name: ToString
  nameWithType: PathGenerator.ToString
  fullName: RobotComponents.Kinematics.PathGenerator.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: RobotComponents.Kinematics.PathGenerator.Calculate*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.Calculate
  isExternal: true
  name: Calculate
  nameWithType: PathGenerator.Calculate
  fullName: RobotComponents.Kinematics.PathGenerator.Calculate
- uid: System.Collections.Generic.List{RobotComponents.Actions.Action}
  commentId: T:System.Collections.Generic.List{RobotComponents.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Action>
  nameWithType: List<Action>
  fullName: System.Collections.Generic.List<RobotComponents.Actions.Action>
  nameWithType.vb: List(Of Action)
  fullName.vb: System.Collections.Generic.List(Of RobotComponents.Actions.Action)
  name.vb: List(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RobotComponents.Actions.Action
    name: Action
    nameWithType: Action
    fullName: RobotComponents.Actions.Action
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RobotComponents.Actions.Action
    name: Action
    nameWithType: Action
    fullName: RobotComponents.Actions.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: RobotComponents.Kinematics.PathGenerator.IsValid*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.IsValid
  isExternal: true
  name: IsValid
  nameWithType: PathGenerator.IsValid
  fullName: RobotComponents.Kinematics.PathGenerator.IsValid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: RobotComponents.Kinematics.PathGenerator.Robot*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.Robot
  isExternal: true
  name: Robot
  nameWithType: PathGenerator.Robot
  fullName: RobotComponents.Kinematics.PathGenerator.Robot
- uid: RobotComponents.Kinematics.PathGenerator.Planes*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.Planes
  isExternal: true
  name: Planes
  nameWithType: PathGenerator.Planes
  fullName: RobotComponents.Kinematics.PathGenerator.Planes
- uid: System.Collections.Generic.List{Rhino.Geometry.Plane}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Plane}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Plane>
  nameWithType: List<Plane>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Plane>
  nameWithType.vb: List(Of Plane)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Plane)
  name.vb: List(Of Plane)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Plane
    name: Plane
    nameWithType: Plane
    fullName: Rhino.Geometry.Plane
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Plane
    name: Plane
    nameWithType: Plane
    fullName: Rhino.Geometry.Plane
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Kinematics.PathGenerator.Paths*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.Paths
  isExternal: true
  name: Paths
  nameWithType: PathGenerator.Paths
  fullName: RobotComponents.Kinematics.PathGenerator.Paths
- uid: System.Collections.Generic.List{Rhino.Geometry.Curve}
  commentId: T:System.Collections.Generic.List{Rhino.Geometry.Curve}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Curve>
  nameWithType: List<Curve>
  fullName: System.Collections.Generic.List<Rhino.Geometry.Curve>
  nameWithType.vb: List(Of Curve)
  fullName.vb: System.Collections.Generic.List(Of Rhino.Geometry.Curve)
  name.vb: List(Of Curve)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rhino.Geometry.Curve
    name: Curve
    nameWithType: Curve
    fullName: Rhino.Geometry.Curve
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rhino.Geometry.Curve
    name: Curve
    nameWithType: Curve
    fullName: Rhino.Geometry.Curve
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Kinematics.PathGenerator.Movements*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.Movements
  isExternal: true
  name: Movements
  nameWithType: PathGenerator.Movements
  fullName: RobotComponents.Kinematics.PathGenerator.Movements
- uid: System.Collections.Generic.List{RobotComponents.Actions.Movement}
  commentId: T:System.Collections.Generic.List{RobotComponents.Actions.Movement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Movement>
  nameWithType: List<Movement>
  fullName: System.Collections.Generic.List<RobotComponents.Actions.Movement>
  nameWithType.vb: List(Of Movement)
  fullName.vb: System.Collections.Generic.List(Of RobotComponents.Actions.Movement)
  name.vb: List(Of Movement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RobotComponents.Actions.Movement
    name: Movement
    nameWithType: Movement
    fullName: RobotComponents.Actions.Movement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RobotComponents.Actions.Movement
    name: Movement
    nameWithType: Movement
    fullName: RobotComponents.Actions.Movement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Kinematics.PathGenerator.RobotJointPositions*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.RobotJointPositions
  isExternal: true
  name: RobotJointPositions
  nameWithType: PathGenerator.RobotJointPositions
  fullName: RobotComponents.Kinematics.PathGenerator.RobotJointPositions
- uid: System.Collections.Generic.List{RobotComponents.Actions.RobotJointPosition}
  commentId: T:System.Collections.Generic.List{RobotComponents.Actions.RobotJointPosition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<RobotJointPosition>
  nameWithType: List<RobotJointPosition>
  fullName: System.Collections.Generic.List<RobotComponents.Actions.RobotJointPosition>
  nameWithType.vb: List(Of RobotJointPosition)
  fullName.vb: System.Collections.Generic.List(Of RobotComponents.Actions.RobotJointPosition)
  name.vb: List(Of RobotJointPosition)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RobotComponents.Actions.RobotJointPosition
    name: RobotJointPosition
    nameWithType: RobotJointPosition
    fullName: RobotComponents.Actions.RobotJointPosition
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RobotComponents.Actions.RobotJointPosition
    name: RobotJointPosition
    nameWithType: RobotJointPosition
    fullName: RobotComponents.Actions.RobotJointPosition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Kinematics.PathGenerator.ExternalJointPositions*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.ExternalJointPositions
  isExternal: true
  name: ExternalJointPositions
  nameWithType: PathGenerator.ExternalJointPositions
  fullName: RobotComponents.Kinematics.PathGenerator.ExternalJointPositions
- uid: System.Collections.Generic.List{RobotComponents.Actions.ExternalJointPosition}
  commentId: T:System.Collections.Generic.List{RobotComponents.Actions.ExternalJointPosition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ExternalJointPosition>
  nameWithType: List<ExternalJointPosition>
  fullName: System.Collections.Generic.List<RobotComponents.Actions.ExternalJointPosition>
  nameWithType.vb: List(Of ExternalJointPosition)
  fullName.vb: System.Collections.Generic.List(Of RobotComponents.Actions.ExternalJointPosition)
  name.vb: List(Of ExternalJointPosition)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RobotComponents.Actions.ExternalJointPosition
    name: ExternalJointPosition
    nameWithType: ExternalJointPosition
    fullName: RobotComponents.Actions.ExternalJointPosition
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RobotComponents.Actions.ExternalJointPosition
    name: ExternalJointPosition
    nameWithType: ExternalJointPosition
    fullName: RobotComponents.Actions.ExternalJointPosition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Kinematics.PathGenerator.ErrorText*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.ErrorText
  isExternal: true
  name: ErrorText
  nameWithType: PathGenerator.ErrorText
  fullName: RobotComponents.Kinematics.PathGenerator.ErrorText
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ*
  commentId: Overload:RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ
  isExternal: true
  name: FirstMovementIsMoveAbsJ
  nameWithType: PathGenerator.FirstMovementIsMoveAbsJ
  fullName: RobotComponents.Kinematics.PathGenerator.FirstMovementIsMoveAbsJ
