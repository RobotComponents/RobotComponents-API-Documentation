### YamlMime:ManagedReference
items:
- uid: RobotComponents.Actions.ITarget
  commentId: T:RobotComponents.Actions.ITarget
  id: ITarget
  parent: RobotComponents.Actions
  children:
  - RobotComponents.Actions.ITarget.DuplicateTarget
  - RobotComponents.Actions.ITarget.ExternalJointPosition
  - RobotComponents.Actions.ITarget.IsValid
  - RobotComponents.Actions.ITarget.Name
  - RobotComponents.Actions.ITarget.ReferenceType
  langs:
  - csharp
  - vb
  name: ITarget
  nameWithType: ITarget
  fullName: RobotComponents.Actions.ITarget
  type: Interface
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Actions
  summary: "\nRepresents the interface for different target types.\n"
  syntax:
    content: public interface ITarget
    content.vb: Public Interface ITarget
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: RobotComponents.Actions.ITarget.DuplicateTarget
  commentId: M:RobotComponents.Actions.ITarget.DuplicateTarget
  id: DuplicateTarget
  parent: RobotComponents.Actions.ITarget
  langs:
  - csharp
  - vb
  name: DuplicateTarget()
  nameWithType: ITarget.DuplicateTarget()
  fullName: RobotComponents.Actions.ITarget.DuplicateTarget()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Actions
  summary: "\nReturns an exact duplicate of this Target.\n"
  syntax:
    content: ITarget DuplicateTarget()
    return:
      type: RobotComponents.Actions.ITarget
      description: 'The exact copy of this Target. '
    content.vb: Function DuplicateTarget As ITarget
  overload: RobotComponents.Actions.ITarget.DuplicateTarget*
- uid: RobotComponents.Actions.ITarget.IsValid
  commentId: P:RobotComponents.Actions.ITarget.IsValid
  id: IsValid
  parent: RobotComponents.Actions.ITarget
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: ITarget.IsValid
  fullName: RobotComponents.Actions.ITarget.IsValid
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Actions
  summary: "\nGets a value indicating whether or not the object is valid.\n"
  syntax:
    content: bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsValid As Boolean
  overload: RobotComponents.Actions.ITarget.IsValid*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: RobotComponents.Actions.ITarget.ReferenceType
  commentId: P:RobotComponents.Actions.ITarget.ReferenceType
  id: ReferenceType
  parent: RobotComponents.Actions.ITarget
  langs:
  - csharp
  - vb
  name: ReferenceType
  nameWithType: ITarget.ReferenceType
  fullName: RobotComponents.Actions.ITarget.ReferenceType
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Actions
  summary: "\nGets or sets the Reference Type.\n"
  syntax:
    content: ReferenceType ReferenceType { get; set; }
    parameters: []
    return:
      type: RobotComponents.Enumerations.ReferenceType
    content.vb: Property ReferenceType As ReferenceType
  overload: RobotComponents.Actions.ITarget.ReferenceType*
  modifiers.csharp:
  - get
  - set
- uid: RobotComponents.Actions.ITarget.Name
  commentId: P:RobotComponents.Actions.ITarget.Name
  id: Name
  parent: RobotComponents.Actions.ITarget
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ITarget.Name
  fullName: RobotComponents.Actions.ITarget.Name
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Actions
  summary: "\nGets or sets the Target variable name.\nEach Target variable name has to be unique.\n"
  syntax:
    content: string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Name As String
  overload: RobotComponents.Actions.ITarget.Name*
  modifiers.csharp:
  - get
  - set
- uid: RobotComponents.Actions.ITarget.ExternalJointPosition
  commentId: P:RobotComponents.Actions.ITarget.ExternalJointPosition
  id: ExternalJointPosition
  parent: RobotComponents.Actions.ITarget
  langs:
  - csharp
  - vb
  name: ExternalJointPosition
  nameWithType: ITarget.ExternalJointPosition
  fullName: RobotComponents.Actions.ITarget.ExternalJointPosition
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Actions
  summary: "\nGets or sets the External Joint Position.\n"
  syntax:
    content: ExternalJointPosition ExternalJointPosition { get; set; }
    parameters: []
    return:
      type: RobotComponents.Actions.ExternalJointPosition
    content.vb: Property ExternalJointPosition As ExternalJointPosition
  overload: RobotComponents.Actions.ITarget.ExternalJointPosition*
  modifiers.csharp:
  - get
  - set
references:
- uid: RobotComponents.Actions
  commentId: N:RobotComponents.Actions
  isExternal: true
  name: RobotComponents.Actions
  nameWithType: RobotComponents.Actions
  fullName: RobotComponents.Actions
- uid: RobotComponents.Actions.ITarget.DuplicateTarget*
  commentId: Overload:RobotComponents.Actions.ITarget.DuplicateTarget
  isExternal: true
  name: DuplicateTarget
  nameWithType: ITarget.DuplicateTarget
  fullName: RobotComponents.Actions.ITarget.DuplicateTarget
- uid: RobotComponents.Actions.ITarget
  commentId: T:RobotComponents.Actions.ITarget
  parent: RobotComponents.Actions
  isExternal: true
  name: ITarget
  nameWithType: ITarget
  fullName: RobotComponents.Actions.ITarget
- uid: RobotComponents.Actions.ITarget.IsValid*
  commentId: Overload:RobotComponents.Actions.ITarget.IsValid
  isExternal: true
  name: IsValid
  nameWithType: ITarget.IsValid
  fullName: RobotComponents.Actions.ITarget.IsValid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RobotComponents.Actions.ITarget.ReferenceType*
  commentId: Overload:RobotComponents.Actions.ITarget.ReferenceType
  isExternal: true
  name: ReferenceType
  nameWithType: ITarget.ReferenceType
  fullName: RobotComponents.Actions.ITarget.ReferenceType
- uid: RobotComponents.Enumerations.ReferenceType
  commentId: T:RobotComponents.Enumerations.ReferenceType
  parent: RobotComponents.Enumerations
  isExternal: true
  name: ReferenceType
  nameWithType: ReferenceType
  fullName: RobotComponents.Enumerations.ReferenceType
- uid: RobotComponents.Enumerations
  commentId: N:RobotComponents.Enumerations
  isExternal: true
  name: RobotComponents.Enumerations
  nameWithType: RobotComponents.Enumerations
  fullName: RobotComponents.Enumerations
- uid: RobotComponents.Actions.ITarget.Name*
  commentId: Overload:RobotComponents.Actions.ITarget.Name
  isExternal: true
  name: Name
  nameWithType: ITarget.Name
  fullName: RobotComponents.Actions.ITarget.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: RobotComponents.Actions.ITarget.ExternalJointPosition*
  commentId: Overload:RobotComponents.Actions.ITarget.ExternalJointPosition
  isExternal: true
  name: ExternalJointPosition
  nameWithType: ITarget.ExternalJointPosition
  fullName: RobotComponents.Actions.ITarget.ExternalJointPosition
- uid: RobotComponents.Actions.ExternalJointPosition
  commentId: T:RobotComponents.Actions.ExternalJointPosition
  parent: RobotComponents.Actions
  isExternal: true
  name: ExternalJointPosition
  nameWithType: ExternalJointPosition
  fullName: RobotComponents.Actions.ExternalJointPosition
