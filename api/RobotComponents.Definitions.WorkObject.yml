### YamlMime:ManagedReference
items:
- uid: RobotComponents.Definitions.WorkObject
  commentId: T:RobotComponents.Definitions.WorkObject
  id: WorkObject
  parent: RobotComponents.Definitions
  children:
  - RobotComponents.Definitions.WorkObject.#ctor
  - RobotComponents.Definitions.WorkObject.#ctor(RobotComponents.Definitions.WorkObject,System.Boolean)
  - RobotComponents.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane)
  - RobotComponents.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane,RobotComponents.Definitions.ExternalAxis)
  - RobotComponents.Definitions.WorkObject.Duplicate
  - RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh
  - RobotComponents.Definitions.WorkObject.ExternalAxis
  - RobotComponents.Definitions.WorkObject.FixedFrame
  - RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane
  - RobotComponents.Definitions.WorkObject.GetOrientation
  - RobotComponents.Definitions.WorkObject.GetUserFrameOrientation
  - RobotComponents.Definitions.WorkObject.GetWorkObjData
  - RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane
  - RobotComponents.Definitions.WorkObject.IsValid
  - RobotComponents.Definitions.WorkObject.Name
  - RobotComponents.Definitions.WorkObject.Orientation
  - RobotComponents.Definitions.WorkObject.Plane
  - RobotComponents.Definitions.WorkObject.ReInitialize
  - RobotComponents.Definitions.WorkObject.RobotHold
  - RobotComponents.Definitions.WorkObject.ToString
  - RobotComponents.Definitions.WorkObject.UserFrame
  - RobotComponents.Definitions.WorkObject.UserFrameOrientation
  langs:
  - csharp
  - vb
  name: WorkObject
  nameWithType: WorkObject
  fullName: RobotComponents.Definitions.WorkObject
  type: Class
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe WorkObject class creates the work object data for the RAPID base code.\nWork object data is used to describe the work object that the robot welds, processes, moves within, etc.\nThe work object is typically combined with a robot movement to defined the global coordinate of the robot target. \n"
  syntax:
    content: public class WorkObject
    content.vb: Public Class WorkObject
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: RobotComponents.Definitions.WorkObject.#ctor
  commentId: M:RobotComponents.Definitions.WorkObject.#ctor
  id: '#ctor'
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: WorkObject()
  nameWithType: WorkObject.WorkObject()
  fullName: RobotComponents.Definitions.WorkObject.WorkObject()
  type: Constructor
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nAn empty constructr that creates the the work object data wobj0 in such a way \nthat the object coordinate system coincides with the world coordinate system. \nThe robot does not hold the work object. \n"
  syntax:
    content: public WorkObject()
    content.vb: Public Sub New
  overload: RobotComponents.Definitions.WorkObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane)
  commentId: M:RobotComponents.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane)
  id: '#ctor(System.String,Rhino.Geometry.Plane)'
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: WorkObject(String, Plane)
  nameWithType: WorkObject.WorkObject(String, Plane)
  fullName: RobotComponents.Definitions.WorkObject.WorkObject(System.String, Rhino.Geometry.Plane)
  type: Constructor
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe constructor to create a fixed user defined work object coordinate system. \n"
  syntax:
    content: public WorkObject(string name, Plane plane)
    parameters:
    - id: name
      type: System.String
      description: 'The work object name. '
    - id: plane
      type: Rhino.Geometry.Plane
      description: 'The work object coorindate system as a Plane. '
    content.vb: Public Sub New(name As String, plane As Plane)
  overload: RobotComponents.Definitions.WorkObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane,RobotComponents.Definitions.ExternalAxis)
  commentId: M:RobotComponents.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane,RobotComponents.Definitions.ExternalAxis)
  id: '#ctor(System.String,Rhino.Geometry.Plane,RobotComponents.Definitions.ExternalAxis)'
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: WorkObject(String, Plane, ExternalAxis)
  nameWithType: WorkObject.WorkObject(String, Plane, ExternalAxis)
  fullName: RobotComponents.Definitions.WorkObject.WorkObject(System.String, Rhino.Geometry.Plane, RobotComponents.Definitions.ExternalAxis)
  type: Constructor
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe constructor to create a movable usre definied work object coordinate system.\n"
  syntax:
    content: public WorkObject(string name, Plane plane, ExternalAxis externalAxis)
    parameters:
    - id: name
      type: System.String
      description: 'The work object name. '
    - id: plane
      type: Rhino.Geometry.Plane
      description: 'The work object coorindate system as a Plane. '
    - id: externalAxis
      type: RobotComponents.Definitions.ExternalAxis
      description: 'The coupled external axis (mechanical unit) that moves the work object. '
    content.vb: Public Sub New(name As String, plane As Plane, externalAxis As ExternalAxis)
  overload: RobotComponents.Definitions.WorkObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.#ctor(RobotComponents.Definitions.WorkObject,System.Boolean)
  commentId: M:RobotComponents.Definitions.WorkObject.#ctor(RobotComponents.Definitions.WorkObject,System.Boolean)
  id: '#ctor(RobotComponents.Definitions.WorkObject,System.Boolean)'
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: WorkObject(WorkObject, Boolean)
  nameWithType: WorkObject.WorkObject(WorkObject, Boolean)
  fullName: RobotComponents.Definitions.WorkObject.WorkObject(RobotComponents.Definitions.WorkObject, System.Boolean)
  type: Constructor
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nCreates a new work object by duplicating an existing movement.\nThis creates a deep copy of the existing work object.\n"
  syntax:
    content: public WorkObject(WorkObject workObject, bool duplicateMesh = true)
    parameters:
    - id: workObject
      type: RobotComponents.Definitions.WorkObject
      description: 'The work object that should be duplicated. '
    - id: duplicateMesh
      type: System.Boolean
      description: 'A boolean that indicates if the meshes should be duplicated. '
    content.vb: Public Sub New(workObject As WorkObject, duplicateMesh As Boolean = True)
  overload: RobotComponents.Definitions.WorkObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.Duplicate
  commentId: M:RobotComponents.Definitions.WorkObject.Duplicate
  id: Duplicate
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: Duplicate()
  nameWithType: WorkObject.Duplicate()
  fullName: RobotComponents.Definitions.WorkObject.Duplicate()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nA method to duplicate the WorkObject object. \n"
  syntax:
    content: public WorkObject Duplicate()
    return:
      type: RobotComponents.Definitions.WorkObject
      description: 'Returns a deep copy of the WorkObject object. '
    content.vb: Public Function Duplicate As WorkObject
  overload: RobotComponents.Definitions.WorkObject.Duplicate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh
  commentId: M:RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh
  id: DuplicateWithoutMesh
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: DuplicateWithoutMesh()
  nameWithType: WorkObject.DuplicateWithoutMesh()
  fullName: RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nA method to duplicate the WorkObject object without meshes. \n"
  syntax:
    content: public WorkObject DuplicateWithoutMesh()
    return:
      type: RobotComponents.Definitions.WorkObject
      description: 'Returns a deep copy of the WorkObject object with an external axis with empty meshes. '
    content.vb: Public Function DuplicateWithoutMesh As WorkObject
  overload: RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.ToString
  commentId: M:RobotComponents.Definitions.WorkObject.ToString
  id: ToString
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: WorkObject.ToString()
  fullName: RobotComponents.Definitions.WorkObject.ToString()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nReturns a string that represents the current object.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: 'A string that represents the current object. '
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: RobotComponents.Definitions.WorkObject.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: RobotComponents.Definitions.WorkObject.GetOrientation
  commentId: M:RobotComponents.Definitions.WorkObject.GetOrientation
  id: GetOrientation
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: GetOrientation()
  nameWithType: WorkObject.GetOrientation()
  fullName: RobotComponents.Definitions.WorkObject.GetOrientation()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nMethod that calculates the quaternion orientation of the work object coordinate system. \n"
  syntax:
    content: public Quaternion GetOrientation()
    return:
      type: Rhino.Geometry.Quaternion
      description: 'Returns the quaternion orientation of the work object. '
    content.vb: Public Function GetOrientation As Quaternion
  overload: RobotComponents.Definitions.WorkObject.GetOrientation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.GetUserFrameOrientation
  commentId: M:RobotComponents.Definitions.WorkObject.GetUserFrameOrientation
  id: GetUserFrameOrientation
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: GetUserFrameOrientation()
  nameWithType: WorkObject.GetUserFrameOrientation()
  fullName: RobotComponents.Definitions.WorkObject.GetUserFrameOrientation()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nMethod that calculates the quaternion orientation of the user frame coordinate system. \n"
  syntax:
    content: public Quaternion GetUserFrameOrientation()
    return:
      type: Rhino.Geometry.Quaternion
      description: 'Returns the quaternion orientation of the user frame. '
    content.vb: Public Function GetUserFrameOrientation As Quaternion
  overload: RobotComponents.Definitions.WorkObject.GetUserFrameOrientation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane
  commentId: M:RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane
  id: GetGlobalWorkObjectPlane
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: GetGlobalWorkObjectPlane()
  nameWithType: WorkObject.GetGlobalWorkObjectPlane()
  fullName: RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nCalculates the global work object plane since the work object coordinate system and \nthe user frame coordinate system can both be un equal to the worldc coordinate system. \n"
  syntax:
    content: public Plane GetGlobalWorkObjectPlane()
    return:
      type: Rhino.Geometry.Plane
      description: 'Returns the global work object plane. '
    content.vb: Public Function GetGlobalWorkObjectPlane As Plane
  overload: RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.ReInitialize
  commentId: M:RobotComponents.Definitions.WorkObject.ReInitialize
  id: ReInitialize
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: ReInitialize()
  nameWithType: WorkObject.ReInitialize()
  fullName: RobotComponents.Definitions.WorkObject.ReInitialize()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nA method that can be called to reinitialize all the data that is needed to construct a valid work object. \n"
  syntax:
    content: public void ReInitialize()
    content.vb: Public Sub ReInitialize
  overload: RobotComponents.Definitions.WorkObject.ReInitialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.GetWorkObjData
  commentId: M:RobotComponents.Definitions.WorkObject.GetWorkObjData
  id: GetWorkObjData
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: GetWorkObjData()
  nameWithType: WorkObject.GetWorkObjData()
  fullName: RobotComponents.Definitions.WorkObject.GetWorkObjData()
  type: Method
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nMethod for creating the work object data for the system BASE code. \n"
  syntax:
    content: public string GetWorkObjData()
    return:
      type: System.String
      description: 'Returns the work object BASE code as a string. '
    content.vb: Public Function GetWorkObjData As String
  overload: RobotComponents.Definitions.WorkObject.GetWorkObjData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.IsValid
  commentId: P:RobotComponents.Definitions.WorkObject.IsValid
  id: IsValid
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: WorkObject.IsValid
  fullName: RobotComponents.Definitions.WorkObject.IsValid
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nA boolean that indicates if the WorkObject object is valid. \n"
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: RobotComponents.Definitions.WorkObject.IsValid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Definitions.WorkObject.Name
  commentId: P:RobotComponents.Definitions.WorkObject.Name
  id: Name
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: WorkObject.Name
  fullName: RobotComponents.Definitions.WorkObject.Name
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe name of the work object.\n"
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: RobotComponents.Definitions.WorkObject.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.RobotHold
  commentId: P:RobotComponents.Definitions.WorkObject.RobotHold
  id: RobotHold
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: RobotHold
  nameWithType: WorkObject.RobotHold
  fullName: RobotComponents.Definitions.WorkObject.RobotHold
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nDefines whether or not the robot in the actual program task is holding the work object. \n"
  syntax:
    content: public bool RobotHold { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property RobotHold As Boolean
  overload: RobotComponents.Definitions.WorkObject.RobotHold*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane
  commentId: P:RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane
  id: GlobalWorkObjectPlane
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: GlobalWorkObjectPlane
  nameWithType: WorkObject.GlobalWorkObjectPlane
  fullName: RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nReturns the global work object plane since the work object coordinate system and \nthe user frame coordinate system can both be unequal to the world coordinate system.\n"
  syntax:
    content: public Plane GlobalWorkObjectPlane { get; }
    parameters: []
    return:
      type: Rhino.Geometry.Plane
    content.vb: Public ReadOnly Property GlobalWorkObjectPlane As Plane
  overload: RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Definitions.WorkObject.UserFrame
  commentId: P:RobotComponents.Definitions.WorkObject.UserFrame
  id: UserFrame
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: UserFrame
  nameWithType: WorkObject.UserFrame
  fullName: RobotComponents.Definitions.WorkObject.UserFrame
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe user coordinate system, i.e. the position of the current work surface or fixture.\nIf the robot is holding the tool, the user coordinate system is defined in the world \ncoordinate system (in the wrist coordinate system if a stationary tool is used). For \nmovable user frame (FixedFrame = false), the user frame is continuously defined by \nthe system.\n"
  syntax:
    content: public Plane UserFrame { get; set; }
    parameters: []
    return:
      type: Rhino.Geometry.Plane
    content.vb: Public Property UserFrame As Plane
  overload: RobotComponents.Definitions.WorkObject.UserFrame*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.Plane
  commentId: P:RobotComponents.Definitions.WorkObject.Plane
  id: Plane
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: Plane
  nameWithType: WorkObject.Plane
  fullName: RobotComponents.Definitions.WorkObject.Plane
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe object coordinate system as a plane (e.g. the position of the current work object).\nThe object coordinate system is defined in the user coordinate system.\n"
  syntax:
    content: public Plane Plane { get; set; }
    parameters: []
    return:
      type: Rhino.Geometry.Plane
    content.vb: Public Property Plane As Plane
  overload: RobotComponents.Definitions.WorkObject.Plane*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.ExternalAxis
  commentId: P:RobotComponents.Definitions.WorkObject.ExternalAxis
  id: ExternalAxis
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: ExternalAxis
  nameWithType: WorkObject.ExternalAxis
  fullName: RobotComponents.Definitions.WorkObject.ExternalAxis
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe external axis (mechanical unit) with which the robot movements are coordinated. \nOnly specified in the case of movable user coordinate systems\n"
  syntax:
    content: public ExternalAxis ExternalAxis { get; set; }
    parameters: []
    return:
      type: RobotComponents.Definitions.ExternalAxis
    content.vb: Public Property ExternalAxis As ExternalAxis
  overload: RobotComponents.Definitions.WorkObject.ExternalAxis*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RobotComponents.Definitions.WorkObject.Orientation
  commentId: P:RobotComponents.Definitions.WorkObject.Orientation
  id: Orientation
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: Orientation
  nameWithType: WorkObject.Orientation
  fullName: RobotComponents.Definitions.WorkObject.Orientation
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe Quaternion orientation of the work object coordinate system.\n"
  syntax:
    content: public Quaternion Orientation { get; }
    parameters: []
    return:
      type: Rhino.Geometry.Quaternion
    content.vb: Public ReadOnly Property Orientation As Quaternion
  overload: RobotComponents.Definitions.WorkObject.Orientation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Definitions.WorkObject.UserFrameOrientation
  commentId: P:RobotComponents.Definitions.WorkObject.UserFrameOrientation
  id: UserFrameOrientation
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: UserFrameOrientation
  nameWithType: WorkObject.UserFrameOrientation
  fullName: RobotComponents.Definitions.WorkObject.UserFrameOrientation
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nThe Quaternion orientation of the user frame coordinate system.\n"
  syntax:
    content: public Quaternion UserFrameOrientation { get; }
    parameters: []
    return:
      type: Rhino.Geometry.Quaternion
    content.vb: Public ReadOnly Property UserFrameOrientation As Quaternion
  overload: RobotComponents.Definitions.WorkObject.UserFrameOrientation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: RobotComponents.Definitions.WorkObject.FixedFrame
  commentId: P:RobotComponents.Definitions.WorkObject.FixedFrame
  id: FixedFrame
  parent: RobotComponents.Definitions.WorkObject
  langs:
  - csharp
  - vb
  name: FixedFrame
  nameWithType: WorkObject.FixedFrame
  fullName: RobotComponents.Definitions.WorkObject.FixedFrame
  type: Property
  source:
    path: RobotComponents
    isExternal: true
  assemblies:
  - RobotComponents
  namespace: RobotComponents.Definitions
  summary: "\nDefines whether or not a fixed user coordinate system is used.\nTrue indicates that the user frame is fixed. \nFalse indicates that the user coordinate system is movable (e.g. coordinated external axes).\n"
  syntax:
    content: public bool FixedFrame { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property FixedFrame As Boolean
  overload: RobotComponents.Definitions.WorkObject.FixedFrame*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: RobotComponents.Definitions
  commentId: N:RobotComponents.Definitions
  isExternal: true
  name: RobotComponents.Definitions
  nameWithType: RobotComponents.Definitions
  fullName: RobotComponents.Definitions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RobotComponents.Definitions.WorkObject.#ctor*
  commentId: Overload:RobotComponents.Definitions.WorkObject.#ctor
  isExternal: true
  name: WorkObject
  nameWithType: WorkObject.WorkObject
  fullName: RobotComponents.Definitions.WorkObject.WorkObject
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Rhino.Geometry.Plane
  isExternal: true
  name: Plane
  nameWithType: Plane
  fullName: Rhino.Geometry.Plane
- uid: RobotComponents.Definitions.ExternalAxis
  commentId: T:RobotComponents.Definitions.ExternalAxis
  parent: RobotComponents.Definitions
  isExternal: true
  name: ExternalAxis
  nameWithType: ExternalAxis
  fullName: RobotComponents.Definitions.ExternalAxis
- uid: RobotComponents.Definitions.WorkObject
  commentId: T:RobotComponents.Definitions.WorkObject
  parent: RobotComponents.Definitions
  isExternal: true
  name: WorkObject
  nameWithType: WorkObject
  fullName: RobotComponents.Definitions.WorkObject
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: RobotComponents.Definitions.WorkObject.Duplicate*
  commentId: Overload:RobotComponents.Definitions.WorkObject.Duplicate
  isExternal: true
  name: Duplicate
  nameWithType: WorkObject.Duplicate
  fullName: RobotComponents.Definitions.WorkObject.Duplicate
- uid: RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh*
  commentId: Overload:RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh
  isExternal: true
  name: DuplicateWithoutMesh
  nameWithType: WorkObject.DuplicateWithoutMesh
  fullName: RobotComponents.Definitions.WorkObject.DuplicateWithoutMesh
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: RobotComponents.Definitions.WorkObject.ToString*
  commentId: Overload:RobotComponents.Definitions.WorkObject.ToString
  isExternal: true
  name: ToString
  nameWithType: WorkObject.ToString
  fullName: RobotComponents.Definitions.WorkObject.ToString
- uid: RobotComponents.Definitions.WorkObject.GetOrientation*
  commentId: Overload:RobotComponents.Definitions.WorkObject.GetOrientation
  isExternal: true
  name: GetOrientation
  nameWithType: WorkObject.GetOrientation
  fullName: RobotComponents.Definitions.WorkObject.GetOrientation
- uid: Rhino.Geometry.Quaternion
  isExternal: true
  name: Quaternion
  nameWithType: Quaternion
  fullName: Rhino.Geometry.Quaternion
- uid: RobotComponents.Definitions.WorkObject.GetUserFrameOrientation*
  commentId: Overload:RobotComponents.Definitions.WorkObject.GetUserFrameOrientation
  isExternal: true
  name: GetUserFrameOrientation
  nameWithType: WorkObject.GetUserFrameOrientation
  fullName: RobotComponents.Definitions.WorkObject.GetUserFrameOrientation
- uid: RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane*
  commentId: Overload:RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane
  isExternal: true
  name: GetGlobalWorkObjectPlane
  nameWithType: WorkObject.GetGlobalWorkObjectPlane
  fullName: RobotComponents.Definitions.WorkObject.GetGlobalWorkObjectPlane
- uid: RobotComponents.Definitions.WorkObject.ReInitialize*
  commentId: Overload:RobotComponents.Definitions.WorkObject.ReInitialize
  isExternal: true
  name: ReInitialize
  nameWithType: WorkObject.ReInitialize
  fullName: RobotComponents.Definitions.WorkObject.ReInitialize
- uid: RobotComponents.Definitions.WorkObject.GetWorkObjData*
  commentId: Overload:RobotComponents.Definitions.WorkObject.GetWorkObjData
  isExternal: true
  name: GetWorkObjData
  nameWithType: WorkObject.GetWorkObjData
  fullName: RobotComponents.Definitions.WorkObject.GetWorkObjData
- uid: RobotComponents.Definitions.WorkObject.IsValid*
  commentId: Overload:RobotComponents.Definitions.WorkObject.IsValid
  isExternal: true
  name: IsValid
  nameWithType: WorkObject.IsValid
  fullName: RobotComponents.Definitions.WorkObject.IsValid
- uid: RobotComponents.Definitions.WorkObject.Name*
  commentId: Overload:RobotComponents.Definitions.WorkObject.Name
  isExternal: true
  name: Name
  nameWithType: WorkObject.Name
  fullName: RobotComponents.Definitions.WorkObject.Name
- uid: RobotComponents.Definitions.WorkObject.RobotHold*
  commentId: Overload:RobotComponents.Definitions.WorkObject.RobotHold
  isExternal: true
  name: RobotHold
  nameWithType: WorkObject.RobotHold
  fullName: RobotComponents.Definitions.WorkObject.RobotHold
- uid: RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane*
  commentId: Overload:RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane
  isExternal: true
  name: GlobalWorkObjectPlane
  nameWithType: WorkObject.GlobalWorkObjectPlane
  fullName: RobotComponents.Definitions.WorkObject.GlobalWorkObjectPlane
- uid: RobotComponents.Definitions.WorkObject.UserFrame*
  commentId: Overload:RobotComponents.Definitions.WorkObject.UserFrame
  isExternal: true
  name: UserFrame
  nameWithType: WorkObject.UserFrame
  fullName: RobotComponents.Definitions.WorkObject.UserFrame
- uid: RobotComponents.Definitions.WorkObject.Plane*
  commentId: Overload:RobotComponents.Definitions.WorkObject.Plane
  isExternal: true
  name: Plane
  nameWithType: WorkObject.Plane
  fullName: RobotComponents.Definitions.WorkObject.Plane
- uid: RobotComponents.Definitions.WorkObject.ExternalAxis*
  commentId: Overload:RobotComponents.Definitions.WorkObject.ExternalAxis
  isExternal: true
  name: ExternalAxis
  nameWithType: WorkObject.ExternalAxis
  fullName: RobotComponents.Definitions.WorkObject.ExternalAxis
- uid: RobotComponents.Definitions.WorkObject.Orientation*
  commentId: Overload:RobotComponents.Definitions.WorkObject.Orientation
  isExternal: true
  name: Orientation
  nameWithType: WorkObject.Orientation
  fullName: RobotComponents.Definitions.WorkObject.Orientation
- uid: RobotComponents.Definitions.WorkObject.UserFrameOrientation*
  commentId: Overload:RobotComponents.Definitions.WorkObject.UserFrameOrientation
  isExternal: true
  name: UserFrameOrientation
  nameWithType: WorkObject.UserFrameOrientation
  fullName: RobotComponents.Definitions.WorkObject.UserFrameOrientation
- uid: RobotComponents.Definitions.WorkObject.FixedFrame*
  commentId: Overload:RobotComponents.Definitions.WorkObject.FixedFrame
  isExternal: true
  name: FixedFrame
  nameWithType: WorkObject.FixedFrame
  fullName: RobotComponents.Definitions.WorkObject.FixedFrame
