<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RobotComponents.ABB.Controllers</name>
    </assembly>
    <members>
        <member name="T:RobotComponents.ABB.Controllers.Enumerations.CoordinateSystemType">
            <summary>
            Defines the coordinate system.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Enumerations.CoordinateSystemType.World">
            <summary>
            World coordinate system
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Enumerations.CoordinateSystemType.Base">
            <summary>
            Base coordinate system.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Enumerations.CoordinateSystemType.Workbobject">
            <summary>
            Workobject coordite system.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm">
            <summary>
            Represents the pick path form class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm.#ctor(RobotComponents.ABB.Controllers.Controller)">
            <summary>
            Initiales a pick path form.
            </summary>
            <param name="controller"> The controller to read from. </param>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm.Task">
            <summary>
            Gets the name of the task.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm.Module">
            <summary>
            Gets the module name. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm.Symbol">
            <summary>
            Gets the name of the RAPID symbol
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickRapidDomainPathForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Forms.PickSignalForm">
            <summary>
            Represents the pick signal form class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickSignalForm.#ctor(System.Collections.Generic.List{RobotComponents.ABB.Controllers.Signal})">
            <summary>
            Constructs a pick signal form.
            </summary>
            <param name="items"> The items to fill the form with. </param>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickSignalForm.Index">
            <summary>
            Gets the index of the picked signal. 
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Forms.PickSignalForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickSignalForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickSignalForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm">
            <summary>
            Represents the pick path form class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.#ctor(RobotComponents.ABB.Controllers.Controller)">
            <summary>
            Initiales a pick path form.
            </summary>
            <param name="controller"> The controller to read from. </param>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.Domain">
            <summary>
            Gets the name of the domain.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.Type">
            <summary>
            Gets the type name. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.Instance">
            <summary>
            Gets the name of the instance.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.Attribute">
            <summary>
            Gets the name of the attribute. 
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickConfigurationDomainPathForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Forms.PickTaskForm">
            <summary>
            Represents the pick task form class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickTaskForm.#ctor(RobotComponents.ABB.Controllers.Controller)">
            <summary>
            Creates a pick task form.
            </summary>
            <param name="controller"> The controller to pick a task from. </param>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickTaskForm.Index">
            <summary>
            Gets the selected index.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Forms.PickTaskForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickTaskForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickTaskForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Forms.PickControllerForm">
            <summary>
            Represents the pick controller form class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickControllerForm.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructs the form from a given list with items.
            </summary>
            <param name="items"> Items to fill the form with. </param>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Forms.PickControllerForm.Index">
            <summary>
            Gets the picked index.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Controllers.Forms.PickControllerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickControllerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Forms.PickControllerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Controller">
            <summary>
            Represents the Controller class. 
            </summary>
            <remarks>
            This class is a wrapper around the ABB Controller class
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.#ctor(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Constructs a Controller instance from an ABB Controller Info instance. 
            </summary>
            <param name="controllerInfo"> The ABB Controller Info instance. </param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.#ctor(ABB.Robotics.Controllers.ControllerInfo,System.Boolean)">
            <summary>
            Constructs a Controller instance from an ABB Controller Info instance. 
            </summary>
            <remarks>
            Only used for scanning the network with controllers. 
            </remarks>
            <param name="controllerInfo"> The ABB Controller Info instance. </param>
            <param name="initialize"> Defines if the field should be initialized. </param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetControllers">
            <summary>
            Returns a list with ABB Controllers that are found in the network. 
            </summary>
            <remarks> 
            These controllers are not initialized. Call Initialize first if you want to use these controllers. 
            </remarks>
            <returns> 
            A list with controlers. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.Initiliaze">
            <summary>
            Initializes the fields of this Controller instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.Clear">
            <summary>
            Clears all fields except the log. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.Log(System.String)">
            <summary>
            Writes a message to the logger. 
            </summary>
            <param name="msg"> The message to write to the logger. </param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.ResetLogger">
            <summary>
            Resets the logger.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.Logon">
            <summary>
            Logon to the set user. 
            </summary>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.Logoff">
            <summary>
            Logs off the current user.
            </summary>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.Dispose">
            <summary>
            Disposes the current controller object inside this instance.
            </summary>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetRobotBaseFrames">
            <summary>
            Returns the robot base frames.
            </summary>
            <returns> 
            A dictionary with as key the name of the robot and as value the base frame. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetRobotToolPlanes(System.Int32)">
            <summary>
            Returns the current robot tool planes.
            </summary>
            <returns> 
            A dictionary with as key the name of the robot and as value the current tool planes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetExternalAxisPlanes(System.Int32)">
            <summary>
            Returns the current external axis planes.
            </summary>
            <returns> 
            A dictionary with as key the name of the external axis and as value the current plane.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetRobotJointPositions">
            <summary>
            Returns the current robot joint positions.
            </summary>
            <returns> 
            A dictionary with as key the name of the robot and as value the current robot joint position. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetExternalJointPositions">
            <summary>
            Returns the current external joint positions.
            </summary>
            <returns> 
            A dictionary with as key the name of the external axis and as value the current external joint position. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetJointTargets">
            <summary>
            Returns the current joint targets. 
            </summary>
            <returns> 
            A dictionary with as key the name of the task and as value the current joint target.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetRobotTargets">
            <summary>
            Returns the current robot targets. 
            </summary>
            <returns> 
            A dictionary with as key the name of the task and as value the current robot target.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetAnalogOutputs">
            <summary>
            Returns the analog output signals. 
            </summary>
            <returns> 
            A list with analog output signals. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetDigitalOutputs">
            <summary>
            Returns the digital output signals. 
            </summary>
            <returns> 
            A list with digital output signals. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetAnalogInputs">
            <summary>
            Returns the analog inputs. 
            </summary>
            <returns> 
            A list with analog inputs. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetDigitalInputs">
            <summary>
            Returns the digital inputs.
            </summary>
            <returns> 
            A list with digital inputs. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.SetUserInfo(System.String,System.String)">
            <summary>
            Sets the uner name and password. 
            </summary>
            <param name="name"> The user name. </param>
            <param name="password"> The password. </param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.SetDefaultUser">
            <summary>
            Sets the default user info. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetAnalogInput(System.String,System.Int32@)">
            <summary>
            Returns the analog input signal from the controller. 
            </summary>
            <param name="name"> The name of the signal. </param>
            <param name="index"> The index number of the signal. The index is -1 if no signal was found. </param>
            <returns> 
            The analog input signal. Returns an empty signal if no signal was found. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetAnalogOutput(System.String,System.Int32@)">
            <summary>
            Returns the analog output signal from the controller. 
            </summary>
            <param name="name"> The name of the signal. </param>
            <param name="index"> The index number of the signal. The index is -1 if no signal was found. </param>
            <returns> 
            The analog output signal. Returns an empty signal if no signal was found. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetDigitalInput(System.String,System.Int32@)">
            <summary>
            Returns the digital input signal from the controller. 
            </summary>
            <param name="name"> The name of the signal. </param>
            <param name="index"> The index number of the signal. The index is -1 if no signal was found. </param>
            <returns> 
            The digital input signal. Returns an empty signal if no signal was found. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.GetDigitalOutput(System.String,System.Int32@)">
            <summary>
            Returns the digital output signal from the controller. 
            </summary>
            <param name="name"> The name of the signal. </param>
            <param name="index"> The index number of the signal. The index is -1 if no signal was found. </param>
            <returns> 
            The digital output signal. Returns an empty signal if no signal was found. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.TryPickTask(System.String,ABB.Robotics.Controllers.RapidDomain.Task@)">
            <summary>
            Picks a task from the controller
            </summary>
            <param name="taskName"> The name of the task. </param>
            <param name="task"> The picked task. </param>
            <returns> True on success, false on failure. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.UploadModule(System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            Uploads a module to the controller. 
            </summary>
            <param name="taskName"> The task to upload to. </param>
            <param name="module"> The module to upload. </param>
            <param name="status"> The status message. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.ClearLocalTemporaryDirectory">
            <summary>
            Removes all the files from the local folder with temporary files. 
            </summary>
            <returns> True on success, false on failure. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.SetProgramPointer(System.String,System.String)">
            <summary>
            Sets the Programing pointer at specific routine in specified task. 
            </summary>
            <param name="task"> The name of the task, </param>
            <param name="routine"> The name of the routine. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.ResetProgramPointers(System.String@)">
            <summary>
            Resets all the program pointers to the main routine. 
            </summary>
            <param name="status"> The status message, </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.ResetProgramPointer(System.String,System.String@)">
            <summary>
            Resets the program pointer of a given task. 
            </summary>
            <param name="taskName"> The task name. </param>
            <param name="status">The status message. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.RunProgram(System.String@)">
            <summary>
            Makes a call to run the program. 
            </summary>
            <param name="status"> The status message. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.StopProgram(System.String@)">
            <summary>
            Makes a call to stop the program. 
            </summary>
            <param name="status"> The status message. </param>
            <returns> 
            True on success, false on failure.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.ReadConfigurationDomain(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the value from the configuration database for a given path. 
            </summary>
            <param name="domain"> The domain name. </param>
            <param name="type"> The type name. </param>
            <param name="instance"> The instance name. </param>
            <param name="attribute">TThe attribute name. </param>
            <returns> 
            A value from the configuration database. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Controller.ReadRapidDomain(System.String,System.String,System.String)">
            <summary>
            Returns the rapid value of a specified path.
            </summary>
            <param name="task"> The task name. </param>
            <param name="module"> The module name. </param>
            <param name="variable"> The variable name. </param>
            <returns> 
            The rapid value as a RAPID data string. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.Controllers">
            <summary>
            Gets the controllers found in the network. 
            </summary>
            <remarks> 
            Call the static method GetControllers first to scan the network. 
            Call Initialize before using one of the controllers. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.ControllerABB">
            <summary>
            Gets the controller instance. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.TasksABB">
            <summary>
            Gets the list with controller tasks. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.TaskNames">
            <summary>
            Gets the task names. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.Name">
            <summary>
            Gets the name of the controller. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.UserName">
            <summary>
            Gets the set username. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.Logger">
            <summary>
            Gets the logger. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.IsEmpty">
            <summary>
            Gets a value indicating whether or not the controller instance is empty.
            </summary>
            <remarks>
            If empty, there is no ABB controller instance defined inside this instance.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.IsInitialized">
            <summary>
            Gets a value indicating whether or not the controller instance is initialized.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.AnalogInputs">
            <summary>
            Gets the analog inputs. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.AnalogOutputs">
            <summary>
            Gets the analog outputs. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.DigitalInputs">
            <summary>
            Gets the digital inputs. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Controller.DigitalOutputs">
            <summary>
            Gets the analog outputs. 
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Controllers.Signal">
            <summary>
            Represents the Signal class. 
            </summary>
            <remarks>
            This class is a wrapper around the ABB Signal class. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Signal.#ctor">
            <summary>
            Empty constructor. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Signal.#ctor(ABB.Robotics.Controllers.IOSystemDomain.Signal,ABB.Robotics.Controllers.Controller)">
            <summary>
            Construct a Signal instance from an ABB Signal instance. 
            </summary>
            <param name="signal"> The ABB Signal instance. </param>
            <param name="controller"> The ABB Controller instance. </param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Signal.#ctor(ABB.Robotics.Controllers.IOSystemDomain.Signal,RobotComponents.ABB.Controllers.Controller)">
            <summary>
            Construct a Signal instance from an ABB Signal instance. 
            </summary>
            <param name="signal"> The ABB Signal instance. </param>
            <param name="controller"> The Robot Components Controller instance. </param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Signal.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Signal.SetAccesLevels(ABB.Robotics.Controllers.Controller)">
            <summary>
            Sets the acces level of the signal.
            </summary>
            <param name="controller"> The ABB controller instance. </param>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Signal.SetValue(System.Single,System.String@)">
            <summary>
            Overwrites the current value of the signal. 
            </summary>
            <param name="value"> The desired signal state. </param>
            <param name="msg"> The status message. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Controllers.Signal.Dispose">
            <summary>
            Disposes the current signal object inside this instance.
            </summary>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.SignalABB">
            <summary>
            Gets the signal instance.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.Name">
            <summary>
            Gets the signal name. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.Limits">
            <summary>
            Gets the minimum and maximum values of the signal as an interval.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.Value">
            <summary>
            Gets the current value of the signal. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.MinValue">
            <summary>
            Gets the minimum value of the signal.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.MaxValue">
            <summary>
            Gets the maximum value of the signal. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.IsEmpty">
            <summary>
            Gets a value indicating whether or not the signal instance is empty.
            <remarks>
            If empty, there is no ABB signal instance defined inside this instance. 
            </remarks>
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Controllers.Signal.AccesLevel">
            <summary>
            Gets the acces level.
            </summary>
        </member>
    </members>
</doc>
