<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RobotComponents.ABB</name>
    </assembly>
    <members>
        <member name="T:RobotComponents.ABB.Actions.ActionGroup">
            <summary>
            Represents a group of Actions.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.#ctor">
            <summary>
            Initializes an empty instance of the Action Group class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.#ctor(System.Collections.Generic.IList{RobotComponents.ABB.Actions.IAction})">
            <summary>
            Initializes a new instance of the Action Group class with an empty name.
            </summary>
            <param name="actions"> The list with actions. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.#ctor(System.String,System.Collections.Generic.IList{RobotComponents.ABB.Actions.IAction})">
            <summary>
            Initializes a new instance of the Action Group class.
            </summary>
            <param name="name"> The name of the Action Group. </param>
            <param name="actions"> The list with actions. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.#ctor(RobotComponents.ABB.Actions.ActionGroup)">
            <summary>
            Initializes a new instance of the Action Group class by duplicating an existing Action Group instance. 
            </summary>
            <param name="group"> The Action Group instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.Duplicate">
            <summary>
            Returns an exact duplicate of this Action Group instance.
            </summary>
            <returns> 
            A deep copy of the Action Group instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Action Group instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Action Group instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.DuplicateToList">
            <summary>
            Returns a duplicate of the list with Actions as a list.
            </summary>
            <returns> 
            The duplicate of the list with actions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.DuplicateToArray">
            <summary>
            Returns a duplicate of the list with Actions as an array.
            </summary>
            <returns> 
            The duplicate of the list with actions as an array. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.Add(RobotComponents.ABB.Actions.IAction)">
            <summary>
            Adds and action to the end of this action group.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.AddRange(System.Collections.Generic.IList{RobotComponents.ABB.Actions.IAction})">
            <summary>
            Adds the elements of the specified collection with actions to the end of this action group.
            </summary>
            <param name="collection"> The colleciton with actions. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.Clear">
            <summary>
            Removes all elements from the action group.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.IndexOf(RobotComponents.ABB.Actions.IAction)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="action"> The object to locate in the list. </param>
            <returns> 
            The index of value if found in the list; otherwise, -1. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.Insert(System.Int32,RobotComponents.ABB.Actions.IAction)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index"> The zero-based index at which value should be inserted. </param>
            <param name="action"> The object to insert into the list. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.Contains(RobotComponents.ABB.Actions.IAction)">
            <summary>
            Determines whether the list contains a specific value.
            </summary>
            <param name="action"> The object to locate in the List. </param>
            <returns> 
            True if the Action is found in the list; otherwise, false. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.Remove(RobotComponents.ABB.Actions.IAction)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="action"> The object to remove from the IList. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the list item at the specified index.
            </summary>
            <param name="index"> The zero-based index of the item to remove. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.CopyTo(RobotComponents.ABB.Actions.IAction[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"> The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. </param>
            <param name="index"> The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.Ungroup">
            <summary>
            Returns the actions inside this group including the actions of the groups that are inside this group.
            </summary>
            <returns> 
            List with Actions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID data string of all declarative actions as one string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line of a instructive actions as one string.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.ActionGroup.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.ActionGroup.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.ActionGroup.Name">
            <summary>
            Gets or sets the name of the Action Group.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.ActionGroup.Actions">
            <summary>
            Gets or sets the collection with Actions.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.ActionGroup.Count">
            <summary>
            Gets the number of Actions that are grouped. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.ActionGroup.Item(System.Int32)">
            <summary>
            Gets or sets the Actions through the indexer. 
            </summary>
            <param name="index"> The index number. </param>
            <returns> 
            The Action located at the given index. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Actions.ActionGroup.IsFixedSize">
            <summary>
            Gets a value indicating whether or not the action collection has a fixed size.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.ActionGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.ConfigurationData">
            <summary>
            Represents the Configuration Data declaration. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.#ctor">
            <summary>
            Initializes an empty instance of the Configuration Data class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Configuration Data class.
            </summary>
            <param name="cf1"> The current quadrant of axis 1. </param>
            <param name="cf4"> The current quadrant of axis 4. </param>
            <param name="cf6"> The current quadrant of axis 6. </param>
            <param name="cfx"> The current robot configuration. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Configuration Data class.
            </summary>
            <param name="name"> The confiruation data name, must be unique. </param>
            <param name="cf1"> The current quadrant of axis 1. </param>
            <param name="cf4"> The current quadrant of axis 4. </param>
            <param name="cf6"> The current quadrant of axis 6. </param>
            <param name="cfx"> The current robot configuration. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.#ctor(RobotComponents.ABB.Actions.Declarations.ConfigurationData)">
            <summary>
            Initializes a new instance of the Configuration Data class by duplicating an existing Configuration Data instance. 
            </summary>
            <param name="configurationData"> The Configuration Data instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Duplicate">
            <summary>
            Returns an exact duplicate of this Configuration Data instance.
            </summary>
            <returns> A deep copy of the Configuration Data instance. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Configuration Data instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Configuration Data instance as an IDeclaration.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Configuration Data instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Configuration Data instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Configuration Data class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"> The RAPID data string. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Parse(System.String)">
            <summary>
            Returns a Configuration Data instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.ConfigurationData@)">
            <summary>
            Attempts to parse a RAPID data string into a Configuration Data instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="configurationData"> The Configuration Data intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.ToRAPID">
            <summary>
            Returns the Configuration Data in RAPID code format.
            </summary>
            <remarks>
            An example output is "[0, 0, 0, 1]".
            </remarks>
            <returns> 
            The string with robot target values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An emptry string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ConfigurationData.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Name">
            <summary>
            Gets or sets the Configuration Data variable name. 
            </summary>
            <remaks>
            Each variable name has to be unique.
            </remaks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Cf1">
            <summary>
            Gets ors sets the current quadrant of axis 1.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Cf4">
            <summary>
            Gets ors sets the current quadrant of axis 4.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Cf6">
            <summary>
            Gets ors sets the current quadrant of axis 6.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ConfigurationData.Cfx">
            <summary>
            Gets or sets the current robot configuration.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.TaskList">
            <summary>
            Represents a collection that specifies several RAPID program tasks.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.#ctor">
            <summary>
            Initializes an empty instance of the Tasks class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the Tasks class.
            </summary>
            <param name="name"> The name of the set with tasks. </param>
            <param name="tasks"> The tasks names as a collection with strings. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.#ctor(RobotComponents.ABB.Actions.Declarations.TaskList)">
            <summary>
            Initializes a new instance of the Tasks class by duplicating an existing Tasks instance. 
            </summary>
            <param name="tasks"> The Tasks instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.Duplicate">
            <summary>
            Returns an exact duplicate of this Tasks instance.
            </summary>
            <returns> 
            A deep copy of the Tasks instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Tasks instance as IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Tasks instance as an IDelcaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Tasks instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Tasks instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Task List class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"> The RAPID data string. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.Parse(System.String)">
            <summary>
            Returns a Task List instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.TaskList@)">
            <summary>
            Attempts to parse a RAPID data string into a Task List instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="taskList"> The Task List intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.ToArray">
            <summary>
            Returns the Tasks as an array with task names.
            </summary>
            <returns> 
            The array containing the task names. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.ToList">
            <summary>
            Returns the Tasks as an array with task names.
            </summary>
            <returns> 
            The array containing the task names. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.ToRAPID">
            <summary>
            Returns the Task List in RAPID code format. 
            </summary>
            <remarks>
            An example output is "["T_ROB1", "T_ROB2"]".
            </remarks>
            <returns> 
            The RAPID data string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string.  
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.TaskList.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.VariableType">
            <summary>
            Gets or sets the variable type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.Name">
            <summary>
            Gets or sets the name of the set with tasks.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.Count">
            <summary>
            Gets the number of elements in this Tasks collection.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.Item(System.Int32)">
            <summary>
            Gets or sets the task names through the indexer. 
            </summary>
            <param name="index"> The index number. </param>
            <returns> 
            The task name located at the given index. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.TaskList.IsFixedSize">
            <summary>
            Gets a value indicating whether or not the task collection has a fixed size.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.IDeclaration">
            <summary>
            Represents the interface for different declaration action types.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IDeclaration.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Declaration.
            </summary>
            <returns> 
            The exact copy of this Declaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IDeclaration.ToRAPID">
            <summary>
            Returns the Declaration in RAPID code format.
            </summary>
            <returns> 
            The RAPID data string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IDeclaration.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IDeclaration.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IDeclaration.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IDeclaration.Scope">
            <summary>
            Gets or sets the scope
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IDeclaration.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IDeclaration.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IDeclaration.Name">
            <summary>
            Gets or sets the variable name of the declaration.
            </summary>
            <remarks>
            Each variable name has to be unique. 
            </remarks>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.ITarget">
            <summary>
            Represents the interface for different target types.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ITarget.DuplicateTarget">
            <summary>
            Returns an exact duplicate of this Target.
            </summary>
            <returns> The exact copy of this Target. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ITarget.ToRAPID">
            <summary>
            Returns the Target in RAPID code format.
            </summary>
            <returns> 
            The RAPID data string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ITarget.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ITarget.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ITarget.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ITarget.VariableType">
            <summary>
            Gets or sets the Variable Type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ITarget.Name">
            <summary>
            Gets or sets the Target variable name.
            Each Target variable name has to be unique.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ITarget.ExternalJointPosition">
            <summary>
            Gets or sets the External Joint Position.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.JointTarget">
            <summary>
            Represents a Joint Target declaration. 
            </summary>
            <remarks>
            This action is used to define each individual axis position, for both the robot and the external axes.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor">
            <summary>
            Initializes an empty instance of the Joint Target class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Initializes a new instance of the Joint Target class with an undefined External Joint Position.
            </summary>
            <param name="robotJointPosition"> The robot joint position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor(System.String,RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Initializes a new instance of the Joint Target class with an undefined External Joint Position.
            </summary>
            <param name="name"> The target name, must be unique. </param>
            <param name="robotJointPosition"> The robot joint position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Initializes a new instance of the Joint Target class.
            </summary>
            <param name="robotJointPosition"> The Robot Joint Position</param>
            <param name="externalJointPosition"> The External Joint Position</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor(System.String,RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Initializes a new instance of the Joint Target class.
            </summary>
            <param name="name"> The target name, must be unique.</param>
            <param name="robotJointPosition"> The Robot Joint Position</param>
            <param name="externalJointPosition"> The External Joint Position</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor(RobotComponents.ABB.Actions.Declarations.JointTarget)">
            <summary>
            Initializes a new instance of the Joint Target class by duplicating an existing Joint Target instance. 
            </summary>
            <param name="jointTarget"> The Joint Target instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.Duplicate">
            <summary>
            Returns an exact duplicate of this Joint Target instance.
            </summary>
            <returns> 
            A deep copy of the Joint Target instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.DuplicateTarget">
            <summary>
            Returns an exact duplicate of this Joint Target instance as an ITarget. 
            </summary>
            <returns> 
            A deep copy of the Joint Target instance as an ITarget. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Joint Target instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Joint Target instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Joint Target instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Joint Target instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Joint Target class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"> The RAPID data string. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.Parse(System.String)">
            <summary>
            Returns a Joint Target instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.JointTarget@)">
            <summary>
            Attempts to parse a RAPID data string into a Joint Target instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="jointTarget"> The Joint Target intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.CheckAxisLimits(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Checks both internal and external axis limits and returns a list with possible errors messages. 
            </summary>
            <param name="robot"> The robot to check the axis values for. </param>
            <returns> 
            The list with error messages. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.CheckInternalAxisLimits(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Checks the internal axis limits and returns a list with possible errors messages. 
            </summary>
            <param name="robot"> The robot to check the axis values for. </param>
            <returns> 
            The list with error messages. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.CheckExternalAxisLimits(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Checks the external axis limits and returns a list with possible errors messages. 
            </summary>
            <param name="robot"> The robot to check the axis values for. </param>
            <returns> 
            The list with error messages. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.ToRAPID">
            <summary>
            Returns the Joint Target in RAPID code format.
            </summary>
            <remarks>
            Example outputs are 
            "[[0, 0, 0, 0, 45, 0], [1000, 9E9, 9E9, 9E9, 9E9, 9E9]]", 
            "[robjoint1, [1000, 9E9, 9E9, 9E9, 9E9, 9E9]]" and 
            "[robjoint1, extjoint1]"
            </remarks>
            <returns> 
            The RAPID data string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.JointTarget.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.JointTarget.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.JointTarget.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.JointTarget.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.JointTarget.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.JointTarget.Name">
            <summary>
            Gets or sets the Joint Target variable name.
            </summary>
            <remarks>
            Each variable name has to be unique.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.JointTarget.RobotJointPosition">
            <summary>
            Gets or sets the Robot Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.JointTarget.ExternalJointPosition">
            <summary>
            Gets or sets the External Joint Position.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.RobotJointPosition">
            <summary>
            Represents the Robot Joint Position declaration.
            </summary>
            <remarks>
            This action is used to define the robot axis positions in degrees.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor">
            <summary>
            Initializes a new instance of the Robot Joint Position class with an empty name an all joint positions set to zero. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Robot Joint Position class with an empty name.
            </summary>
            <param name="rax_1"> The position of robot axis 1 in degrees from the calibration position. </param>
            <param name="rax_2"> The position of robot axis 2 in degrees from the calibration position.</param>
            <param name="rax_3"> The position of robot axis 3 in degrees from the calibration position.</param>
            <param name="rax_4"> The position of robot axis 4 in degrees from the calibration position.</param>
            <param name="rax_5"> The position of robot axis 5 in degrees from the calibration position.</param>
            <param name="rax_6"> The position of robot axis 6 in degrees from the calibration position.</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the Robot Joint Position class with an empty name from a collection with values 
            </summary>
            <param name="internalJointPositions"> The user defined internal joint positions as a collection.</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Robot Joint Position class.
            </summary>
            <param name="name"> The robot joint position name, must be unique. </param>
            <param name="rax_1"> The position of robot axis 1 in degrees from the calibration position. </param>
            <param name="rax_2"> The position of robot axis 2 in degrees from the calibration position.</param>
            <param name="rax_3"> The position of robot axis 3 in degrees from the calibration position.</param>
            <param name="rax_4"> The position of robot axis 4 in degrees from the calibration position.</param>
            <param name="rax_5"> The position of robot axis 5 in degrees from the calibration position.</param>
            <param name="rax_6"> The position of robot axis 6 in degrees from the calibration position.</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor(System.String,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the Robot Joint Position class from a collection with values.
            </summary>
            <param name="name"> The robot joint position name, must be unique. </param>
            <param name="internalJointPositions"> The user defined internal joint positions as a colection.</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Initializes a new instance of the Robot Joint Position class by duplicating an existing Robot Joint Position instance. 
            </summary>
            <param name="robotJointPosition"> The Robot Joint Position instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Duplicate">
            <summary>
            Returns an exact duplicate of this Robot Joint Position instance.
            </summary>
            <returns> 
            A deep copy of the Robot Joint Position instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Robot Joint Position instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Robot Joint Position instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Robot Joint Position instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Robot Joint Position instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.DuplicateJointPosition">
            <summary>
            Returns an exact duplicate of this Robot Joint Position instance as an IJointPosition.
            </summary>
            <returns> 
            A deep copy of the Robot Joint Position instance as an IJointPosition. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Robot Joint Position class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"></param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Parse(System.String)">
            <summary>
            Returns a Robot Joint Position instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.RobotJointPosition@)">
            <summary>
            Attempts to parse a RAPID data string into a Robot Joint Position instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="robotJointPosition"> The Robot Joint Position intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.ToArray">
            <summary>
            Returns the Robot Joint Position as an array with joint positions.
            </summary>
            <returns> 
            The array containing the the robot joint positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.ToList">
            <summary>
            Returns the Robot Joint Position as an array with joint positions.
            </summary>
            <returns> The list containing of the robot joint positions. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Sum">
            <summary>
            Computes the sum of the values in this joint position.
            </summary>
            <returns> 
            The sum of the values in the joint position. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Norm">
            <summary>
            Computes the norm of this joint position.
            </summary>
            <returns> 
            The norm of the joint position. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.NormSq">
            <summary>
            Computes the square norm of this joint position.
            </summary>
            <returns> 
            The square norm of this joint position. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Reset">
            <summary>
            Sets all the elements in the joint position back to its default value (0.0).
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Add(System.Double)">
            <summary>
            Adds a constant number to all the values inside this Joint Position.
            </summary>
            <param name="value"> 
            The number to be added. 
            </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Add(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Adds the values of an Robot Joint Position to the values inside this Joint Position. 
            </summary>
            <remarks>
            Value 1 + value 1, value 2 + value 2, value 3 + value 3 etc.
            </remarks>
            <param name="jointPosition"> The Robot Joint Position to be added. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Substract(System.Double)">
            <summary>
            Substracts a constant number from the values inside this Joint Position.
            </summary>
            <param name="value"> The number to be substracted. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Substract(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Substracts the values of an Robot Joint Position from the values inside this Joint Position. 
            </summary>
            <remarks>
            Value 1 - value 1, value 2 - value 2, value 3 - value 3 etc.
            </remarks>
            <param name="jointPosition"> The Robot Joint Position to be substracted. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Multiply(System.Double)">
            <summary>
            Multiplies the values inside this Joint Position with a constant number.
            </summary>
            <param name="value"> The multiplier as a double. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Multiply(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Multiplies the values inside this Joint Position with the values from another Robot Joint Position.
            </summary>
            <remarks>
            Value 1 * value 1, value 2 * value 2, value 3 * value 3 etc.
            </remarks>
            <param name="jointPosition"> The multiplier as a Robot Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Divide(System.Double)">
            <summary>
            Divides the values inside this Joint Position with a constant number.
            </summary>
            <param name="value"> The divider as a double. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Divide(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Divides the values inside this Joint Position with the values from another Robot Joint Position.
            </summary>
            <remarks>
            Value 1 / value 1, value 2 / value 2, value 3 / value 3 etc.
            </remarks>
            <param name="jointPosition"> The divider as an Robot Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.CheckAxisValues(System.Collections.Generic.IList{System.Double})">
            <summary>
            Cecks the array with internal joint positions. 
            </summary>
            <remarks>
            Always returns a list with 6 internal joint positions. 
            For missing values 0.0 is used. </remarks>
            <param name="jointPositions"> The list with the internal joint positions. </param>
            <returns> 
            The array with 6 joint positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.ToRAPID">
            <summary>
            Returns the Joint Position in RAPID code format, e.g. 
            </summary>
            <remarks>
            An example output is "[0, 0, 0, 0, 45, 0]".
            </remarks>
            <returns> 
            The string with joint positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Name">
            <summary>
            Gets or sets the Robot Joint Position variable name.
            </summary>
            <remarks>
            Each variable name has to be unique.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Length">
            <summary>
            Gets the number of elements in the Robot Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.Item(System.Int32)">
            <summary>
            Gets or sets the joint positions through the indexer. 
            </summary>
            <param name="index"> The index number. </param>
            <returns> 
            The joint position located at the given index. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.IsFixedSize">
            <summary>
            Gets a value indicating whether or not the joint position array has a fixed size.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Addition(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,System.Double)">
            <summary>
            Adds a number to all the values inside the Robot Joint Position.
            </summary>
            <param name="p"> The Robot Joint Position. </param>
            <param name="num"> The value to add. </param>
            <returns> 
            The Robot Joint Position with added values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Subtraction(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,System.Double)">
            <summary>
            Substracts a number from all the values inside the Robot Joint Position.
            </summary>
            <param name="p"> The Robot Joint Position. </param>
            <param name="num"> The number to substract. </param>
            <returns> 
            The Robot Joint Position with divide values.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Multiply(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,System.Double)">
            <summary>
            Mutliplies all the values inside the Robot Joint Position by a number.
            </summary>
            <param name="p"> The Robot Joint Position. </param>
            <param name="num"> The value to multiply by. </param>
            <returns> 
            The Robot Joint Position with multiplied values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Division(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,System.Double)">
            <summary>
            Divides all the values inside the Robot Joint Position by a number. 
            </summary>
            <param name="p"> The Robot Joint Position. </param>
            <param name="num"> The number to divide by. </param>
            <returns> 
            The Robot Joint Position with divide values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Addition(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Adds a Robot Joint Position to an other Robot Joint Position.
            </summary>
            <param name="p1"> The first Robot Joint Position. </param>
            <param name="p2"> The second Robot Joint Position. </param>
            <returns> 
            The addition of the two Robot Joint Poistion.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Subtraction(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Substracts a Robot Joint Position from an other Robot Joint Position.
            </summary>
            <param name="p1"> The first Robot Joint Position. </param>
            <param name="p2"> The second Robot Joint Position. </param>
            <returns> 
            The first robot Joint Position minus the second Robot Joint Position. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Multiply(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Multiplies a Robot Joint Position woth an other Robot Joint Position.
            </summary>
            <param name="p1"> The first Robot Joint Position. </param>
            <param name="p2"> The second Robot Joint Position. </param>
            <returns> 
            The multiplicaton of the two Robot Joint Positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotJointPosition.op_Division(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Divides a Robot Joint Position with an other Robot Joint Position.
            </summary>
            <param name="p1"> The first Robot Joint Position. </param>
            <param name="p2"> The second Robot Joint Position. </param>
            <returns> 
            The first Robot Joint Position divided by the second Robot Joint Position. 
            </returns>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.IJointPosition">
            <summary>
            Represents the interface for different Joint Positions.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IJointPosition.DuplicateJointPosition">
            <summary>
            Returns an exact duplicate of this IJointPosition.
            </summary>
            <returns> 
            The exact copy of this IJointPosition. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IJointPosition.ToArray">
            <summary>
            Returns the Joint Position as an array with axis values.
            </summary>
            <returns> 
            The array containing the joint positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IJointPosition.ToList">
            <summary>
            Returns the Joint Position as a list with axis values.
            </summary>
            <returns> 
            The list containing the the joint positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IJointPosition.ToRAPID">
            <summary>
            Returns the Joint Position in RAPID code format, e.g. "[0, 0, 0, 0, 45, 0]".
            </summary>
            <returns> 
            The string with joint positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IJointPosition.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IJointPosition.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.IJointPosition.Reset">
            <summary>
            Sets all the elements in the joint position back to its default value.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IJointPosition.Name">
            <summary>
            Gets or sets the Joint Position variable name.
            </summary>
            <remarks>
            Each variable name has to be unique.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IJointPosition.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IJointPosition.Length">
            <summary>
            Gets the number of elements in the joint position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IJointPosition.Item(System.Int32)">
            <summary>
            Gets or sets the joint position through the indexer. 
            </summary>
            <param name="index"> The index number. </param>
            <returns> 
            The joint position located at the given index. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.IJointPosition.IsFixedSize">
            <summary>
            Gets a value indicating whether or not the joint position array has a fixed size.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition">
            <summary>
            Represents an External Joint Position declaration.
            </summary>
            <remarks>
            This action is used to defined define the axis positions of external axes, positioners and workpiece manipulators.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization.</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor">
            <summary>
            Initializes a new instance of the External Joint Position class with an empty name and undefinied positions of the external logical axes.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the External Joint Position class with an empty name.
            </summary>
            <param name="Eax_a"> The position of the external logical axis “a” expressed in degrees or mm.double.IsNaN(Eax_a) </param>
            <param name="Eax_b"> The position of the external logical axis “b” expressed in degrees or mm. </param>
            <param name="Eax_c"> The position of the external logical axis “c” expressed in degrees or mm. </param>
            <param name="Eax_d"> The position of the external logical axis “d” expressed in degrees or mm. </param>
            <param name="Eax_e"> The position of the external logical axis “3” expressed in degrees or mm. </param>
            <param name="Eax_f"> The position of the external logical axis “f” expressed in degrees or mm. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the External Joint Position class with an empty name from a list with values.
            </summary>
            <param name="externalJointPositions"> The list with the positions of the external logical axes. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the External Joint Position class.
            </summary>
            <param name="name"> The external joint position name, must be unique. </param>
            <param name="Eax_a"> The position of the external logical axis “a” expressed in degrees or mm. </param>
            <param name="Eax_b"> The position of the external logical axis “b” expressed in degrees or mm. </param>
            <param name="Eax_c"> The position of the external logical axis “c” expressed in degrees or mm. </param>
            <param name="Eax_d"> The position of the external logical axis “d” expressed in degrees or mm. </param>
            <param name="Eax_e"> The position of the external logical axis “3” expressed in degrees or mm. </param>
            <param name="Eax_f"> The position of the external logical axis “f” expressed in degrees or mm. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor(System.String,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the External Joint Position class from a collection with values.
            </summary>
            <param name="name"> The external joint position name, must be unique. </param>
            <param name="externalJointPositions"> The collection with the position of the external logical axes. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Initializes a new instance of the External Joint Position class by duplicating an existing External Joint Position instance. 
            </summary>
            <param name="externalJointPosition"> The External Joint Position instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Duplicate">
            <summary>
            Returns an exact duplicate of this External Joint Position instance.
            </summary>
            <returns> 
            A deep copy of the External Joint Position instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.DuplicateAction">
            <summary>
            Returns an exact duplicate of this External Joint Position instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the External Joint Position instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this External Joint Position instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the External Joint Position instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.DuplicateJointPosition">
            <summary>
            Returns an exact duplicate of this External Joint Position instance as an IJointPosition.
            </summary>
            <returns> 
            A deep copy of the External Joint Position instance as an IJointPosition. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the External Joint Position class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"></param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Parse(System.String)">
            <summary>
            Returns a External Joint Position instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition@)">
            <summary>
            Attempts to parse a RAPID data string into a External Joint Position instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="externalJointPosition"> The External Joint Position intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.ToArray">
            <summary>
            Returns the External Joint Position as an array with the positions of the external logical axes.
            </summary>
            <returns> An array containing the positions of the external logical axes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.ToList">
            <summary>
            Returns the External Joint Position as a list with the positions of the external logical axes.
            </summary>
            <returns> 
            A list containing the positions of the external logical axes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Reset">
            <summary>
            Sets all the elements in the joint position back to its default value (9E9).
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Add(System.Double)">
            <summary>
            Adds a constant number to all the values inside this Joint Position.
            </summary>
            <param name="value"> The number to be added. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Add(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Adds the values of an External Joint Position to the values inside this Joint Position. .
            </summary>
            <remarks>
            Value 1 + value 1, value 2 + value 2, value 3 + value 3 etc.
            </remarks>
            <param name="jointPosition"> The External Joint Position to be added. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Substract(System.Double)">
            <summary>
            Substracts a constant number from the values inside this Joint Position.
            </summary>
            <param name="value"> The number to be substracted. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Substract(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Substracts the values of an External Joint Position from the values inside this Joint Position. 
            </summary>
            <remarks>
            Value 1 - value 1, value 2 - value 2, value 3 - value 3 etc.
            </remarks>
            <param name="jointPosition"> The External Joint Position to be substracted. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Multiply(System.Double)">
            <summary>
            Multiplies the values inside this Joint Position with a constant number.
            </summary>
            <param name="value"> The multiplier as a double. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Multiply(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Multiplies the values inside this Joint Position with the values from another External Joint Position.
            </summary>
            <remarks>
            Value 1 * value 1, value 2 * value 2, value 3 * value 3 etc.
            </remarks>
            <param name="jointPosition"> The multiplier as an External Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Divide(System.Double)">
            <summary>
            Divides the values inside this Joint Position with a constant number.
            </summary>
            <param name="value"> The divider as a double. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Divide(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Divides the values inside this Joint Position with the values from another External Joint Position.
            </summary>
            <remarks>
            Value 1 / value 1, value 2 / value 2, value 3 / value 3 etc.
            </remarks>
            <param name="jointPosition"> The divider as an External Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.CheckAxisValues(System.Collections.Generic.IList{System.Double})">
            <summary>
            Checks the array the positions of the external logical axes. 
            </summary>
            <remarks>
            Always returns an array with 6 joint positions. 
            For missing values 9E9 (not connected) will be used. 
            </remarks>
            <param name="axisValues"> The array with the positions of the external logical axes. </param>
            <returns> 
            The array with the 6 positions of the external axes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.ToRAPID">
            <summary>
            Returns the Joint Position in RAPID code format.
            </summary>
            <remarks>
            An example output is "[100, 9E9, 9E9, 9E9, 9E9, 9E9]".
            </remarks>
            <returns> 
            The RAPID data string with the positions of the external axes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID data code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Name">
            <summary>
            Gets or sets the External Joint Position variable name.
            </summary>
            <remarks>
            Each variable name has to be unique.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Length">
            <summary>
            Gets the number of elements in the External Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Item(System.Int32)">
            <summary>
            Gets or sets the position of the external logical axis through the indexer. 
            </summary>
            <param name="index"> The index number. </param>
            <returns> 
            The position of the external logical axis located at the given index. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.Item(System.Char)">
            <summary>
            Gets or sets the position of the external logical axis through the indexer. 
            </summary>
            <param name="index"> The index character. </param>
            <returns> 
            The position of the external logical axis located at the given index. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.IsFixedSize">
            <summary>
            Gets a value indicating whether or not the joint position array has a fixed size.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Addition(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Double)">
            <summary>
            Adds a number to all the values inside the External Joint Position.
            </summary>
            <param name="p"> The External Joint Position. </param>
            <param name="num"> The value to add. </param>
            <returns> 
            The External Joint Position with added values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Subtraction(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Double)">
            <summary>
            Substracts a number from all the values inside the External Joint Position.
            </summary>
            <param name="p"> The External Joint Position. </param>
            <param name="num"> The number to substract. </param>
            <returns> 
            The External Joint Position with divide values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Multiply(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Double)">
            <summary>
            Mutliplies all the values inside the External Joint Position by a number.
            </summary>
            <param name="p"> The External Joint Position. </param>
            <param name="num"> The value to multiply by. </param>
            <returns> 
            The External Joint Position with multuplied values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Division(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Double)">
            <summary>
            Divides all the values inside the External Joint Position by a number. 
            </summary>
            <param name="p"> The External Joint Position. </param>
            <param name="num"> The number to divide by. </param>
            <returns> 
            The External Joint Position with divide values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Addition(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Adds an External Joint Position with an other External Joint Position.
            </summary>
            <param name="p1"> The first External Joint Position. </param>
            <param name="p2"> The second External Joint Position. </param>
            <returns> 
            The addition of the two Robot Joint Poistion
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Subtraction(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Substracts an External Joint Position from an other External Joint Position.
            </summary>
            <param name="p1"> The first External Joint Position. </param>
            <param name="p2"> The second External Joint Position. </param>
            <returns> 
            The first External Joint Position minus the second External Joint Position. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Multiply(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Multiplies an External Joint Position with an other External Joint Position.
            </summary>
            <param name="p1"> The first External Joint Position. </param>
            <param name="p2"> The second External Joint Position. </param>
            <returns> 
            The multiplicaton of the two External Joint Positions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ExternalJointPosition.op_Division(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Divides an External Joint Positin with by an other External Joint Position
            </summary>
            <param name="p1"> The first External Joint Position. </param>
            <param name="p2"> The second External Joint Position. </param>
            <returns> 
            The first External Joint Position divided by the second External Joint Position. 
            </returns>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.ZoneData">
            <summary>
            Represents a predefined or user definied Zone Data declaration.
            </summary>
            <remarks>
            This action is used to specify how a position is to be terminated.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor">
            <summary>
            Initializes an empty instance of the Zone Data class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Zone Data class with predefined values.
            </summary>
            <remarks>
            Use -1 to define a fine point.
            </remarks>
            <param name="zone"> The size (the radius) of the TCP zone in mm. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Zone Data class with predefined values.
            </summary>
            <remarks>
            Use -1 to define a fine point.
            </remarks>
            <param name="zone"> The size (the radius) of the TCP zone in mm. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor(System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Zone Data class with custom values. 
            </summary>
            <param name="finep"> Defines whether the movement is to terminate as a stop point (fine point) or as a fly-by point. </param>
            <param name="pzone_tcp"> The size (the radius) of the TCP zone in mm. </param>
            <param name="pzone_ori"> The zone size (the radius) for the tool reorientation. </param>
            <param name="pzone_eax"> The zone size (the radius) for external axes. </param>
            <param name="zone_ori"> The zone size for the tool reorientation in degrees. </param>
            <param name="zone_leax"> The zone size for linear external axes in mm. </param>
            <param name="zone_reax"> he zone size for rotating external axes in degrees. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor(System.String,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Zone Data class with custom values.
            </summary>
            <param name="name"> The Zone Data variable name, must be unique. </param>
            <param name="finep"> Defines whether the movement is to terminate as a stop point (fine point) or as a fly-by point. </param>
            <param name="pzone_tcp"> The size (the radius) of the TCP zone in mm. </param>
            <param name="pzone_ori"> The zone size (the radius) for the tool reorientation. </param>
            <param name="pzone_eax"> The zone size (the radius) for external axes. </param>
            <param name="zone_ori"> The zone size for the tool reorientation in degrees. </param>
            <param name="zone_leax"> The zone size for linear external axes in mm. </param>
            <param name="zone_reax"> he zone size for rotating external axes in degrees. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor(RobotComponents.ABB.Actions.Declarations.ZoneData)">
            <summary>
            Initializes a new instance of the Zone Data class by duplicating an existing Zone Data instance. 
            </summary>
            <param name="zonedata"> The Zone Data instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.GetPredefinedZoneData(RobotComponents.ABB.Enumerations.PredefinedZoneData)">
            <summary>
            Initializes a new instance of the Zone Data clas from an enumeration.
            </summary>
            <param name="predefinedZoneData"> Predefined zonedata as an enumeration </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.Duplicate">
            <summary>
            Returns an exact duplicate of this Zone Data instance.
            </summary>
            <returns> 
            A deep copy of the Zone Data instance.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Zone Data instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Zone Data instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Zone Data instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Zone Data instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Zone Data class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"> The RAPID data string. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.Parse(System.String)">
            <summary>
            Returns a Zone Data instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.ZoneData@)">
            <summary>
            Attempts to parse a RAPID data string into a Zone Data instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="zoneData"> The Zone Data intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.ToRAPID">
            <summary>
            Returns the Zone Data in RAPID code format.
            </summary>
            <remarks>
            An example output is "[FALSE, 0, 0.3, 0.3, 0.3, 0.3, 0.03]".
            </remarks>
            <returns> 
            The RAPID data string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An emptry string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.ZoneData.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.VariableType">
            <summary>
            Gets or sets the variable type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.Name">
            <summary>
            Gets or sets the ZoneData variable name. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.FinePoint">
            <summary>
            Gets or sets a value indicating whether the movement is to terminate as a stop point (fine point) or as a fly-by point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.PathZoneTCP">
            <summary>
            Gets or sets the size (the radius) of the TCP zone in mm.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.PathZoneOrientation">
            <summary>
            Gets or sets the zone size (the radius) for the tool reorientation. 
            </summary>
            <remarks>
            The size is defined as the distance of the TCP from the programmed point in mm.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.PathZoneExternalAxes">
            <summary>
            Gets or sets the zone size (the radius) for external axes. 
            </summary>
            <remarks>
            The size is defined as the distance of the TCP from the programmed point in mm.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.ZoneOrientation">
            <summary>
            Gets or sets the zone size for the tool reorientation in degrees. 
            </summary>
            <remarks>
            If the robot is holding the work object, this means an angle of rotation for the work object.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.ZoneExternalLinearAxes">
            <summary>
            Gets or sets the zone size for linear external axes in mm. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.ZoneExternalRotationalAxes">
            <summary>
            Gets or sets the zone size for rotating external axes in degrees.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.IsPreDefined">
            <summary>
            Gets or sets a value indicating whether this zonedata is a predefined zonedata. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.IsExactPredefinedValue">
            <summary>
            Gets or sets a value indicating whether this zonedata was constructed from an exact predefined zonedata value. 
            </summary>
            <remarks>
            If false the nearest predefined zoneata or a custom zonedata was used.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.ValidPredefinedNames">
            <summary>
            Gets the valid predefined zonedata variable names.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.ValidPredefinedValues">
            <summary>
            Gets the valid predefined zonedata values.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.ZoneData.ValidPredefinedData">
            <summary>
            Gets the valid predefined data as a dictionary.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.SpeedData">
            <summary>
            Represents a predefined or user definied Speed Data declaration.
            </summary>
            <remarks>
            This action is used to specify the velocity at which both the robot and the external axes move.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor">
            <summary>
            Initializes an empty instance of the Speed Data class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Speed Data class with predefined values.
            </summary>
            <param name="v_tcp"> The velocity of the tool center point (TCP) in mm/s. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Speed Data class with predefined values.
            </summary>
            <param name="v_tcp"> The velocity of the tool center point (TCP) in mm/s. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Speed Data class with custom values.
            </summary>
            <param name="v_tcp"> The velocity of the tool center point (TCP) in mm/s. </param>
            <param name="v_ori"> The reorientation velocity of the TCP expressed in degrees/s. </param>
            <param name="v_leax"> The velocity of linear external axes in mm/s. </param>
            <param name="v_reax"> The velocity of rotating external axes in degrees/s. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Speed Data class with custom values.
            </summary>
            <param name="name"> The Speed Data variable name, must be unique. </param>
            <param name="v_tcp"> The velocity of the tool center point (TCP) in mm/s. </param>
            <param name="v_ori"> The reorientation velocity of the TCP expressed in degrees/s. </param>
            <param name="v_leax"> The velocity of linear external axes in mm/s. </param>
            <param name="v_reax"> The velocity of rotating external axes in degrees/s. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor(RobotComponents.ABB.Actions.Declarations.SpeedData)">
            <summary>
            Initializes a new instance of the Speed Data class by duplicating an existing Speed Data instance. 
            </summary>
            <param name="speeddata"> The Speed Data instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.GetPredefinedSpeedData(RobotComponents.ABB.Enumerations.PredefinedSpeedData)">
            <summary>
            Initializes a new instance of the Speed Data clas from an enumeration.
            </summary>
            <param name="predefinedSpeedData"> Predefined speeddata as an enumeration </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.Duplicate">
            <summary>
            Returns an exact duplicate of this Speed Data instance.
            </summary>
            <returns> 
            A deep copy of the Speed Data instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Speed Data instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the SpeedData instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Spee Data instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Speed Data instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Speed Data class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"></param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.Parse(System.String)">
            <summary>
            Returns a Speed Data instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.SpeedData@)">
            <summary>
            Attempts to parse a RAPID data string into a Speed Data instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="speedData"> The Speed Data intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.ToRAPID">
            <summary>
            Returns the Speed Data in RAPID code format.
            </summary>
            <remarks>
            An example output is "[200, 500, 5000, 1000]".s
            </remarks>
            <returns> The string with speed data values. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.SpeedData.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.VariableType">
            <summary>
            Gets or sets the variable type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.Name">
            <summary>
            Gets or sets the speeddata variable name.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.V_TCP">
            <summary>
            Gets or sets the velocity of the tool center point (TCP) in mm/s.
            </summary>
            <remarks>
            If a stationary tool or coordinated external axes are used, the velocity is specified relative to the work object.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.V_ORI">
            <summary>
            Gets or sets the reorientation velocity of the TCP expressed in degrees/s. 
            </summary>
            <remarks>
            If a stationary tool or coordinated external axes are used, the velocity is specified relative to the work object.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.V_LEAX">
            <summary>
            Gets or sets the velocity of linear external axes in mm/s.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.V_REAX">
            <summary>
            Gets or sets the velocity of rotating external axes in degrees/s.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.IsPreDefined">
            <summary>
            Gets or sets a value indicating whether this speeddata is a predefined speeddata. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.IsExactPredefinedValue">
            <summary>
            Gets or sets a value indicating whether this speeddata was constructed from an exact predefined speeddata value. 
            </summary>
            <remarks>
            If false, the nearest predefined speedata or a custom speeddata was used. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.ValidPredefinedNames">
            <summary>
            Gets the valid predefined speeddata variable names.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.ValidPredefinedValues">
            <summary>
            Gets the valid predefined speeddata values.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.SpeedData.ValidPredefinedData">
            <summary>
            Gets the valid predefined data as a dictionary.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Declarations.RobotTarget">
            <summary>
            Represents the Robot Target declaration. 
            </summary>
            <remarks>
            This action is used to define the pose of the robot and the external axes.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor">
            <summary>
            Initializes an empty instance of the Robot Target class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor(Rhino.Geometry.Plane)">
            <summary>
            Initializes a new instance of the Robot Target class with an axis conguration set to zero and an undefined External Joint Position.
            </summary>
            <param name="plane"> The target plane. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor(System.String,Rhino.Geometry.Plane)">
            <summary>
            Initializes a new instance of the Robot Target class with an axis conguration set to zero and an undefined External Joint Position.
            </summary>
            <param name="name"> The target name, must be unique. </param>
            <param name="plane"> The target plane. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor(System.String,Rhino.Geometry.Plane,RobotComponents.ABB.Actions.Declarations.ConfigurationData,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Initializes a new instance of the Robot Target class.
            </summary>
            <param name="name"> The target name, must be unique. </param>
            <param name="plane"> The target plane.</param>
            <param name="configurationData"> The Configuration Data. </param>
            <param name="externalJointPosition"> The External Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Plane,RobotComponents.ABB.Actions.Declarations.ConfigurationData,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Initializes a new instance of the Robot Target class.
            </summary>
            <remarks>
            The target plane will be reoriented from the reference plane to the world xy-plane.
            </remarks>
            <param name="name"> The target name, must be unique.</param>
            <param name="plane"> The target plane.</param>
            <param name="referencePlane"> The Reference plane. </param>
            <param name="configurationData"> The Configuration Data. </param>
            <param name="externalJointPosition"> The External Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor(RobotComponents.ABB.Actions.Declarations.RobotTarget)">
            <summary>
            Initializes a new instance of the Robot Target class by duplicating an existing Robot Target instance. 
            </summary>
            <param name="target"> The Robot Target instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.Duplicate">
            <summary>
            Returns an exact duplicate of this Robot Target instance.
            </summary>
            <returns> 
            A deep copy of the Robot Target instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.DuplicateTarget">
            <summary>
            Returns an exact duplicate of this Robot Target instance as an ITarget. 
            </summary>
            <returns> 
            A deep copy of the Robot Target instance as an ITarget. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Robot Target instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Robot Target instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Robot Target instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Robot Target instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Robot Target class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"> The RAPID data string. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.Parse(System.String)">
            <summary>
            Returns a Robot Target instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.TryParse(System.String,RobotComponents.ABB.Actions.Declarations.RobotTarget@)">
            <summary>
            Attempts to parse a RAPID data string into a Robot Target instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="robotTarget"> The Robot Target intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.ToRAPID">
            <summary>
            Returns the Robot Target in RAPID code format.
            </summary>
            <remarks>
            Example output are 
            "[[300, 600, 250], [1, 0, 0, 0], [0, 0, 0, 1], [1000, 9E9, 9E9, 9E9, 9E9, 9E9]]", 
            "[[300, 600, 250], [1, 0, 0, 0], [0, 0, 0, 1], extjoint1]" and 
            "[[300, 600, 250], [1, 0, 0, 0], confdata1, extjoint1]".
            </remarks>
            <returns> 
            The string with robot target values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An emptry string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Declarations.RobotTarget.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.Name">
            <summary>
            Gets or sets the Robot Target variable name.
            </summary>
            <remarks>
            Each variable name has to be unique. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.Plane">
            <summary>
            Gets or sets the desired position and orientation of the tool center point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.Quat">
            <summary>
            Gets or sets the desired orientation of the tool center point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.ConfigurationData">
            <summary>
            Gets or sets the configuration data.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Declarations.RobotTarget.ExternalJointPosition">
            <summary>
            Gets or sets the External Joint Position.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.AccelerationSet">
            <summary>
            Represent the Acceleration Set instruction.
            </summary>
            <remarks>
            This action is used to adjust the acceleration and decceleration values.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.#ctor">
            <summary>
            Initializes an empty instance of the Acceleration Set class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.#ctor(System.Double,System.Double)">
            <summary>
            Initializes an empty instance of the Acceleration Set class.
            </summary>
            <param name="acceleration"> The acceleration and deceleration as a percentage of the normal values (20-100). </param>
            <param name="ramp"> The rate at which acceleration and deceleration increases as a percentage of the normal values (10-100) </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.#ctor(RobotComponents.ABB.Actions.Instructions.AccelerationSet)">
            <summary>
            Initializes a new instance of the Acceleration Set class by duplicating an existing Acceleration Set instance. 
            </summary>
            <param name="accelerationSet"> The Acceleration Set instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.Duplicate">
            <summary>
            Returns an exact duplicate of this Acceleration Set instance.
            </summary>
            <returns> 
            A deep copy of the Acceleration Set instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Acceleration Set instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Acceleration Set instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Acceleration Set instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Acceleration Set instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.AccelerationSet.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.AccelerationSet.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.AccelerationSet.Acceleration">
            <summary>
            Gets or sets acceleration and deceleration as a percentage of the normal values.
            </summary>
            <remarks>
            Use values from 20 till 100. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.AccelerationSet.Ramp">
            <summary>
            Gets or sets the rate at which acceleration and deceleration increases as a percentage of the normal values..
            </summary>
            <remarks>
            Use values from 10 till 100. 
            </remarks>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation">
            <summary>
            Represent the Path Acceleration Limitation instruction.
            </summary>
            <remarks>
            This action is used to set or reset limitations on TCP 
            acceleration and/or TCP deceleration along the movement path.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.#ctor">
            <summary>
            Initializes an empty instance of the Override Robot Tool class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.#ctor(System.Boolean,System.Double,System.Boolean,System.Double)">
            <summary>
            Initializes an empty instance of the Path Acceleration Limitation class.
            </summary>
            <param name="accelerationLimitation"> Specifies whether or not the acceleration is limited. </param>
            <param name="accelerationMax">  The absolute value of the acceleration limitation in m/s^2. s</param>
            <param name="decelerationLimitation"> Specifies whether or not the deceleration is limited. </param>
            <param name="decelerationMax"> The absolute value of the deceleration limitation in m/s^2. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.#ctor(RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation)">
            <summary>
            Initializes a new instance of the Path Acceleration Limitation class by duplicating an existing Path Acceleration Limitation instance. 
            </summary>
            <param name="pathAccelerationLimitation"> The Path Acceleration Limitation instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.Duplicate">
            <summary>
            Returns an exact duplicate of this Path Acceleration Limitation instance.
            </summary>
            <returns> 
            A deep copy of the Path Acceleration Limitation instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Path Acceleration Limitation instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Path Acceleration Limitation instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Path Acceleration Limitation instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Path Acceleration Limitation instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.AccelerationLimitation">
            <summary>
            Gets or sets a value whether or not the acceleration is limited.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.AccelerationMax">
            <summary>
            Gets or sets the absolute value of the acceleration limitation in m/s^2.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.DecelerationLimitation">
            <summary>
            Gets or sets a value whether or not the deceleration is limited.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PathAccelerationLimitation.DecelerationMax">
            <summary>
             Gets or sets the absolute value of the deceleration limitation in m/s^2.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput">
            <summary>
            Represents a Pulse Digital Output instruction. 
            </summary>
            <remarks>
            This action is used to generate a pulse on a digital output signal.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.#ctor">
            <summary>
            Initializes an empty instance of the Pulse Digital Output class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.#ctor(System.Boolean,System.Double,System.String)">
            <summary>
            Initializes a new instance of the Pulse Digital Output class.
            </summary>
            <param name="high"> Specifies that the signal value should always be set to high independently of its current state. </param>
            <param name="length"> The length of the pulse in seconds. </param>
            <param name="name"> The name of the Digital Output signal. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.#ctor(RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput)">
            <summary>
            Initializes a new instance of the Pulse Digital Output class by duplicating an existing Pulse Digital Output instance. 
            </summary>
            <param name="pulseDigitalOutput"> The Pulse Digital Output instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.Duplicate">
            <summary>
            Returns an exact duplicate of this Pulse Digital Output instance.
            </summary>
            <returns> 
            A deep copy of the Pulse Digital Output instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Pulse Digital Output instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Pulse Digital Output instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Pulse Digital Output instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Pulse Digital Output instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.High">
            <summary>
            Gets or sets a value indicating whether or not that the signal value 
            should always be set to high (1) independently of its current state.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.Length">
            <summary>
            Gets or sets the length of the pulse in seconds.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.PulseDigitalOutput.Name">
            <summary>
            Gets or sets the name of the digital output signal.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput">
            <summary>
            Represents a Set Analog Output instruction. 
            </summary>
            <remarks>
            This action is used to set the value of an analog output signal.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.#ctor">
            <summary>
            Initializes an empty instance of the Set Analog Output class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the Set Analog Output class.
            </summary>
            <param name="name"> The name of the Analog Output signal. </param>
            <param name="value"> The desired value of the signal. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.#ctor(RobotComponents.ABB.Actions.Instructions.SetAnalogOutput)">
            <summary>
            Initializes a new instance of the Set Analog Output class by duplicating an existing Set Analog Output instance. 
            </summary>
            <param name="setAnalogOutput"> The Set Analog Output instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.Duplicate">
            <summary>
            Returns an exact duplicate of this Set Analog Output instance.
            </summary>
            <returns> 
            A deep copy of the Set Analog Output instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Set Analog Output instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Set Analog Output instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Set Analog Output instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Set Analog Output instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.Name">
            <summary>
            Gets or sets the name of the analog output signal.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetAnalogOutput.Value">
            <summary>
            Gets or sets the value of the analog output signal.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.CirclePathMode">
            <summary>
            Represents the Circle Path Mode instruction. 
            </summary>
            <remarks>
            This action makes it possible to select different modes to reorientate the tool during circular movements.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object. 
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.#ctor">
            <summary>
            Initializes an empty instance of the Circle Path Mode class. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.#ctor(RobotComponents.ABB.Enumerations.CirPathMode)">
            <summary>
            Initializes a new instance of the Circle Path Mode class. 
            </summary>
            <param name="mode"> The circle path mode. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.#ctor(RobotComponents.ABB.Actions.Instructions.CirclePathMode)">
            <summary>
            Initializes a new instance of the Circle Path Mode class by duplicating an existing Circle Path Mode instance. 
            </summary>
            <param name="circlePathMode"> The Circle Path Mode instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.Duplicate">
            <summary>
            Returns an exact duplicate of this Circle Path Mode instance.
            </summary>
            <returns> 
            A deep copy of the Circle Path Mode instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Circle Path Mode instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Circle Path Mode instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Circle Path Mode instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Circle Path Mode instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.CirclePathMode.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.CirclePathMode.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.CirclePathMode.Mode">
            <summary>
            Gets or set the circular path mode.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.VelocitySet">
            <summary>
            Represent the Velocity Set instruction.
            </summary>
            <remarks>
            This action is used to override and limit the speed. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.#ctor">
            <summary>
            Initializes an empty instance of the Velocity Set class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.#ctor(System.Double,System.Double)">
            <summary>
            Initializes an empty instance of the Velocity Set class.
            </summary>
            <param name="override"> The desired velocity as a percentage of programmed velocity (0-100). </param>
            <param name="max"> The maximum TCP velocity in mm/s. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.#ctor(RobotComponents.ABB.Actions.Instructions.VelocitySet)">
            <summary>
            Initializes a new instance of the Velocity Set class by duplicating an existing Velocity Set instance. 
            </summary>
            <param name="velocitySet"> The Velocity Set instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.Duplicate">
            <summary>
            Returns an exact duplicate of this Velocity Set instance.
            </summary>
            <returns> 
            A deep copy of the Velocity Set instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Velocity Set instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Velocity Set instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Velocity Set instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Velocity Set instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.VelocitySet.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.VelocitySet.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.VelocitySet.Override">
            <summary>
            Gets or sets the desired velocity as a percentage of programmed velocity.
            </summary>
            <remarks>
            Use values from 0 till 100. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.VelocitySet.Max">
            <summary>
            Gets or sets the maximum TCP velocity in mm/s.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.ISyncident">
            <summary>
            Represents the interface for actions that contain a synchronization identity.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.ISyncident.DuplicateSyncident">
            <summary>
            Returns an exact duplicate of this Syncident.
            </summary>
            <returns>
            The exact copy of this Syncident.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.ISyncident.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.ISyncident.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> The RAPID code line. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.ISyncident.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.ISyncident.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.ISyncident.VariableType">
            <summary>
            Gets or sets the variable type of the syncident.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.ISyncident.SyncID">
            <summary>
            Gets or sets the name of the synchronization (meeting) point (syncident).
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.SyncMoveOff">
            <summary>
            Represents the SyncMoveOff instruction to end a sequence of synchronized movements.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.#ctor">
            <summary>
            Initializes an empty instance of the SyncMoveOff class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the SyncMoveOff class.
            </summary>
            <param name="name"> The name of the synchronization point. </param>
            <param name="timeOut"> The max. time to wait for the other program tasks to reach the synchronization point. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.#ctor(RobotComponents.ABB.Actions.Instructions.SyncMoveOff)">
            <summary>
            Initializes a new instance of the SyncMoveOff class by duplicating an existing SyncMoveOff instance. 
            </summary>
            <param name="SyncMoveOff"> The SyncMoveOff instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.Duplicate">
            <summary>
            Returns an exact duplicate of this SyncMoveOff instance.
            </summary>
            <returns> 
            A deep copy of the SyncMoveOff instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this SyncMoveOff instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the SyncMoveOff instance as an IInstructions 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.DuplicateSyncident">
            <summary>
            Returns an exact duplicate of this SyncMoveOff instance as ISyncident.
            </summary>
            <returns> 
            A deep copy of the SyncMoveOff instance as an ISyncident.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Tasks instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Tasks instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.VariableType">
            <summary>
            Gets or sets the variable type of the syncident.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.SyncID">
            <summary>
            Gets or sets the name of the synchronization (meeting) point (syncident).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOff.TimeOut">
            <summary>
            Gets or sets te max. time to wait for the other program tasks to reach the synchronization point.
            </summary>
            <remarks>
            Set a negative value to wait for ever (default is -1).
            </remarks>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.SyncMoveOn">
            <summary>
            Represents the SyncMoveOn instruction that starts a sequence of synchronized movements.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.#ctor">
            <summary>
            Initializes an empty instance of the SyncMoveOn class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.#ctor(System.String,RobotComponents.ABB.Actions.Declarations.TaskList,System.Double)">
            <summary>
            Initializes a new instance of the SyncMoveOn class.
            </summary>
            <param name="name"> The name of the synchronization point. </param>
            <param name="tasks"> The program tasks that should meet in the synchronization point. </param>
            <param name="timeOut"> The max. time to wait for the other program tasks to reach the synchronization point. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.#ctor(RobotComponents.ABB.Actions.Instructions.SyncMoveOn)">
            <summary>
            Initializes a new instance of the SyncMoveOn class by duplicating an existing SyncMoveOn instance. 
            </summary>
            <param name="syncMoveOn"> The SyncMoveOn instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.Duplicate">
            <summary>
            Returns an exact duplicate of this SyncMoveOn instance.
            </summary>
            <returns> 
            A deep copy of the SyncMoveOn instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this SyncMoveOn instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the SyncMoveOn instance as an IInstructions. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.DuplicateSyncident">
            <summary>
            Returns an exact duplicate of this SyncMoveOn instance as ISyncident.
            </summary>
            <returns> 
            A deep copy of the SyncMoveOn instance as an ISyncident. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.DuplicateAction">
            <summary>
            Returns an exact duplicate of this SyncMoveOn instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the SyncMoveOn instance as an Action. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.VariableType">
            <summary>
            Gets or sets the variable type of the syncident.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.SyncID">
            <summary>
            Gets or sets the name of the synchronization (meeting) point (syncident).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.TaskList">
            <summary>
            Gets or sets the program tasks that should meet in the synchronization point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SyncMoveOn.TimeOut">
            <summary>
            Gets or sets te max. time to wait for the other program tasks to reach the synchronization point.
            </summary>
            <remarks>
            Set a negative value to wait for ever (default is -1).
            </remarks>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.WaitAI">
            <summary>
            Represents a Wait for Analog Input instruction.
            </summary>
            <remarks>
            This action is used to wait until a value of a analog input is set.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.#ctor">
            <summary>
            Initializes an empty instance of the Wait AI class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.#ctor(System.String,System.Double,RobotComponents.ABB.Enumerations.InequalitySymbol,System.Double)">
            <summary>
            Initializes a new instance of the Wait AI class.
            </summary>
            <param name="name"> The name of the signal. </param>
            <param name="value"> The desired value. </param>
            <param name="inequalitySymbol"> The inequality symbol (less than, greater than) </param>
            <param name="maxTime"> The maximum time to wait in seconds. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.#ctor(RobotComponents.ABB.Actions.Instructions.WaitAI)">
            <summary>
            Initializes a new instance of the Wait AI class by duplicating an existing Wait AI instance. 
            </summary>
            <param name="WaitAI"> The Wait AI instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.Duplicate">
            <summary>
            Returns an exact duplicate of this Wait AI instance.
            </summary>
            <returns> 
            A deep copy of the Wait AI instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Wait AI instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Wait AI instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Wait AI instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Wait AI instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitAI.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitAI.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitAI.Value">
            <summary>
            Gets or sets the desired state of the analog input signal.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitAI.Name">
            <summary>
            Gets or sets the name of the analog input signal.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitAI.InequalitySymbol">
            <summary>
            Gets or sets the inequality symbol.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitAI.MaxTime">
            <summary>
            Gets or sets te max. time to wait in seconds.
            </summary>
            <remarks>
            Set a negative value to wait forever (default is -1).
            </remarks>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.WaitSyncTask">
            <summary>
            Represents the WaitSyncTask instruction to synchronize several program tasks at a special point in each program.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.#ctor">
            <summary>
            Initializes an empty instance of the WaitSyncTask class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.#ctor(System.String,RobotComponents.ABB.Actions.Declarations.TaskList,System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the WaitSyncTask class.
            </summary>
            <param name="name"> The name of the synchronization point. </param>
            <param name="tasks"> The program tasks that should meet in the synchronization point. </param>
            <param name="inPosition"> Specifies whether or not the robot and external axes must have come to a standstill in its meeting point. </param>
            <param name="timeOut"> The max. time to wait for the other program tasks to reach the synchronization point. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.#ctor(RobotComponents.ABB.Actions.Instructions.WaitSyncTask)">
            <summary>
            Initializes a new instance of the WaitSyncTask class by duplicating an existing WaitSyncTask instance. 
            </summary>
            <param name="waitSyncTask"> The WaitSyncTask instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.Duplicate">
            <summary>
            Returns an exact duplicate of this WaitSyncTask instance.
            </summary>
            <returns> 
            A deep copy of the WaitSyncTask instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this WaitSyncTask instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the WaitSyncTask instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.DuplicateSyncident">
            <summary>
            Returns an exact duplicate of this WaitSyncTask instance as ISyncident.
            </summary>
            <returns> 
            A deep copy of the WaitSyncTask instance as an ISyncident. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Tasks instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Tasks instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.VariableType">
            <summary>
            Gets or sets the variable type of the syncident.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.SyncID">
            <summary>
            Gets or sets the name of the synchronization (meeting) point (syncident).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.TaskList">
            <summary>
            Gets or sets the program tasks that should meet in the synchronization point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.InPosition">
            <summary>
            Gets or sets a value indicating whether or not the robot and external axes must have come to a standstill 
            before this program task starts waiting for other program tasks to reach its meeting point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitSyncTask.TimeOut">
            <summary>
            Gets te max. time to wait for the other program tasks to reach the synchronization point.
            </summary>
            <remarks>
            Set a negative value to wait for ever(default is -1).
            </remarks>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl">
            <summary>
            Represents the Linear Configuration Control instruction.  
            </summary>
            <remarks>
            This action is used to switch on or off the monitoring of linear movements. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object. 
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.#ctor">
            <summary>
            Initializes an empty instance of the Linear Configuration Control class. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Linear Configuration Control class. 
            </summary>
            <param name="isActive"> Specifies whether the Linear Configuration Control is enabled. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.#ctor(RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl)">
            <summary>
            Initializes a new instance of the Linear Configuration Control class by duplicating an existing Linear Configuration Control instance. 
            </summary>
            <param name="config"> The Linear Configuration Control instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.Duplicate">
            <summary>
            Returns an exact duplicate of this Linear Configuration Control instance.
            </summary>
            <returns> 
            A deep copy of the Linear Configuration Control instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Linear Configuration Control instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Linear Configuration Control instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Linear Configuration Control instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Linear Configuration Control instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.LinearConfigurationControl.IsActive">
            <summary>
            Gets or set a value indicating whether Linear Configuration Control is enabled. 
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl">
            <summary>
            Represents the Joint Configuration Control instruction.  
            </summary>
            <remarks>
            This action is used to switch on or off the monitoring of joint movements. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object. 
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.#ctor">
            <summary>
            Initializes an empty instance of the Joint Configuration Control class. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Joint Configuration Control class. 
            </summary>
            <param name="isActive"> Specifies whether the Joint Configuration Control is enabled. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.#ctor(RobotComponents.ABB.Actions.Instructions.JointConfigurationControl)">
            <summary>
            Initializes a new instance of the Joint Configuration Control class by duplicating an existing Joint Configuration Control instance. 
            </summary>
            <param name="config"> The Joint Configuration Control instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.Duplicate">
            <summary>
            Returns an exact duplicate of this Joint Configuration Control instance.
            </summary>
            <returns> 
            A deep copy of the Joint Configuration Control instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Joint Configuration Control instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Joint Configuration Control instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Joint Configuration Control instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Joint Configuration Control instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> A
            string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.JointConfigurationControl.IsActive">
            <summary>
            Gets or set a value indicating whether Joint Configuration Control is enabled. 
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.IInstruction">
            <summary>
            Represents the interface for different instruction action types.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.IInstruction.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Instruction.
            </summary>
            <returns> 
            The exact copy of this Instruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.IInstruction.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.IInstruction.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.IInstruction.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.Movement">
            <summary>
            Represents several Move instructions (MoveAbsJ, MoveL, MoveJ, MoveC, MoveLDO, MoveJDO and MoveC). 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor">
            <summary>
            Initializes an empty instance of the Movement class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(Rhino.Geometry.Plane)">
            <summary>
            Initializes a new instance of the Movement class.
            </summary>
            <remarks>
            This constructor is typically used to cast a Plane to a Movement. 
            </remarks>
            <param name="plane"> The target plane. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Actions.Declarations.ITarget)">
            <summary>
            Initializes a new instance of the Movement class.
            </summary>
            <remarks>
            This constructor is typically used to cast a Robot Target to a Movement.
            </remarks>
            <param name="target"> The Target. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData)">
            <summary>
            Initializes a new instance of the Movement class with an empty Robot Tool (no override), a default Work Object (wobj0) and an empty Digital Output. 
            </summary>
            <param name="movementType"> The Movmement Type. </param>
            <param name="target"> The Target. </param>
            <param name="speedData"> The Speed Data. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData,RobotComponents.ABB.Actions.Declarations.ZoneData)">
            <summary>
            Initializes a new instance of the Movement class with an empty Robot Tool (no override), a default Work Object (wobj0) and an empty Digital Output. 
            </summary>
            <param name="movementType"> The Movement Type. </param>
            <param name="target"> The Target. </param>
            <param name="speedData"> The Speed Data. </param>
            <param name="zoneData"> The Zone Data. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData,RobotComponents.ABB.Actions.Declarations.ZoneData,RobotComponents.ABB.Definitions.RobotTool)">
            <summary>
            Initializes a new instance of the Movement class with a default Work object (wobj0) and an empty Digital Output.
            </summary>
            <param name="movementType"> The Movement Type. </param>
            <param name="target"> The Target. </param>
            <param name="speedData"> The Speed Data. </param>
            <param name="zoneData"> The Zone Data. </param>
            <param name="robotTool"> The Robot Tool. This will override the set default tool. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData,RobotComponents.ABB.Actions.Declarations.ZoneData,RobotComponents.ABB.Definitions.WorkObject)">
            <summary>
            Initializes a new instance of the Movement class with an empty Robot Tool (no override) and an empty Digital Output.
            </summary>
            <param name="movementType"> The Movement Type. </param>
            <param name="target"> The Target. </param>
            <param name="speedData"> The Speed Data. </param>
            <param name="zoneData"> The Zone Data. </param>
            <param name="workObject"> The Work Object. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData,RobotComponents.ABB.Actions.Declarations.ZoneData,RobotComponents.ABB.Definitions.RobotTool,RobotComponents.ABB.Definitions.WorkObject)">
            <summary>
            Initializes a new instance of the Movement class with an empty Digital Output.
            </summary>
            <param name="movementType"> The Movement Type. </param>
            <param name="target"> The Taret. </param>
            <param name="speedData"> The Speed Data. </param>
            <param name="zoneData"> The Zone Data. </param>
            <param name="robotTool"> The Robot Tool. This will override the set default tool. </param>
            <param name="workObject"> The Work Object. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData,RobotComponents.ABB.Actions.Declarations.ZoneData,RobotComponents.ABB.Actions.Instructions.SetDigitalOutput)">
            <summary>
            Initializes a new instance of the Movement class with an empty Robot Tool (no override) and a default Work Object (wobj0)
            </summary>
            <param name="movementType"> The Movement Type. </param>
            <param name="target"> The Target. </param>
            <param name="speedData"> The Speed Data.</param>
            <param name="zoneData"> The Zone Data. </param>
            <param name="setDigitalOutput"> The Digital Output. When set this will define a MoveLDO, MoveJDO or MoveCDO instruction. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData,RobotComponents.ABB.Actions.Declarations.ZoneData,RobotComponents.ABB.Definitions.RobotTool,RobotComponents.ABB.Actions.Instructions.SetDigitalOutput)">
            <summary>
            Initializes a new instance of the Movement class with a default Work Object (wobj0). 
            </summary>
            <param name="movementType"> The Movement Type. </param>
            <param name="target"> The Target. </param>
            <param name="speedData"> The Speed Data. </param>
            <param name="zoneData"> The Zone Data. </param>
            <param name="robotTool"> The Robot Tool. This will override the set default tool. </param>
            <param name="setDigitalOutput"> The Digital Output. When set this will define a MoveLDO, MoveJDO or MoveCDO instruction. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Enumerations.MovementType,RobotComponents.ABB.Actions.Declarations.ITarget,RobotComponents.ABB.Actions.Declarations.SpeedData,RobotComponents.ABB.Actions.Declarations.ZoneData,RobotComponents.ABB.Definitions.RobotTool,RobotComponents.ABB.Definitions.WorkObject,RobotComponents.ABB.Actions.Instructions.SetDigitalOutput)">
            <summary>
            Initializes a new instance of the Movement class.
            </summary>
            <param name="movementType"> The Movement Type. </param>
            <param name="target"> The Target. </param>
            <param name="speedData"> The Speed Data. </param>
            <param name="zoneData"> The Zone Data. </param>
            <param name="robotTool"> The Robot Tool. This will override the set default tool. </param>
            <param name="workObject"> The Work Object. </param>
            <param name="setDigitalOutput"> The Digital Output. When set this will define a MoveLDO, MoveJDO or MoveCDO instruction. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.#ctor(RobotComponents.ABB.Actions.Instructions.Movement,System.Boolean)">
            <summary>
            Initializes a new instance of the Movement class by duplicating an existing Movement instance. 
            </summary>
            <param name="movement"> The Movement instance to duplicate. </param>
            <param name="duplicateMesh"> Specifies whether the meshes should be duplicated. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.Duplicate">
            <summary>
            Returns an exact duplicate of this Movement instance.
            </summary>
            <returns> 
            A deep copy of the Movement instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Movement instance as IInstruction.
            </summary>
            <returns>
            A deep copy of the Movement instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.DuplicateWithoutMesh">
            <summary>
            Returns an exact duplicate of this Movement instance without meshes.
            </summary>
            <returns> 
            A deep copy of the Movement instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Movement instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Movement instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.CheckCombination">
            <summary>
            Checks the combination between the movement type and the target type.
            </summary>
            <remarks>
            Throws an exception if the combination is not valid. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.GetGlobalTargetPlane">
            <summary>
            Calculates the position and the orientation of the target in world coordinate space. 
            </summary>
            <remarks>
            If an external axis is attached to the work object this method returns the pose of the 
            target plane in the world coorinate space for axis values equal to zero.
            </remarks>
            <returns> 
            The the target plane in world coordinate space. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.GetPosedGlobalTargetPlane">
            <summary>
            Calculates the posed target plane for the defined Robot with attached external axes in world coordinate space.
            </summary>
            <remarks>
            Calculates the position and the orientation of the target plane in the world coordinate system. If there is 
            an external axes connected to work object of the movement, the target plane will be re-oriented according to 
            the pose of the this external axis. 
            </remarks>
            <returns> 
            The posed target plane in world coordinate space. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.ConvertTarget(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Converts the target for the RAPID generator.
            </summary>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.Movement.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.MovementType">
            <summary>
            Gets or sets the Movement Type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.CircularPoint">
            <summary>
            Gets or sets the circular point as a Robot Target. 
            </summary>
            <remarks>
            Defines the circular point for a MoveC instruction.
            Positions of external axes are ignored. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.Target">
            <summary>
            Gets or sets the Target.
            </summary>
            <remarks>
            Defines the destination target of the robot and external axes.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.SyncID">
            <summary>
            Gets or sets the synchronization id for multi move programming. 
            </summary>
            <remarks>
            This ID number must be defined for coordinated synchronized movements in multi move systems. 
            Set this property to -1 to define normal movements (not coordinated / not synchronized).
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.SpeedData">
            <summary>
            Gets or sets the Speed Data. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.Time">
            <summary>
            Gets the the total time which the robot will move in seconds. 
            </summary>
            <remarks>
            This overwrites the defined speeddata value.
            Set this property to a negative value to not overwrite the speeddata value. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.ZoneData">
            <summary>
            Gets or sets the Zone Data.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.RobotTool">
            <summary>
            Gets or sets the Robot Tool.
            </summary>
            <remarks>
            If an empty or no Robot Tool is used, the Robot Tool set at the Robot will be used. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.WorkObject">
            <summary>
            Gets or sets the Work Object. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.Movement.SetDigitalOutput">
            <summary>
            Gets or set the Digital Output. 
            </summary>
            <remarks>
            If an empty or invalid Digital Output is set a normal movement will be set (MoveAbsJ, MoveL or MoveJ). 
            If a valid Digital Output is combined movement will be created (MoveLDO or MoveJDO). 
            If as Movement Type an MoveAbsJ is set an extra RAPID code line will be added that sets the Digital Output (SetDO).
            </remarks>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.WaitDI">
            <summary>
            Represents a Wait for Digital Input instruction.
            </summary>
            <remarks>
            This action is used to wait until a digital input is set.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.#ctor">
            <summary>
            Initializes an empty instance of the Wait DI class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.#ctor(System.String,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the Wait DI class.
            </summary>
            <param name="name"> The name of the signal. </param>
            <param name="value"> Specifies whether the Digital Input is enabled. </param>
            <param name="maxTime"> The maximum time to wait in seconds. </param>
            <param name="timeFlag"> Specifies whether the timeout flag is enabled. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.#ctor(RobotComponents.ABB.Actions.Instructions.WaitDI)">
            <summary>
            Initializes a new instance of the Wait DI class by duplicating an existing Wait DI instance. 
            </summary>
            <param name="waitDI"> The Wait DI instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.Duplicate">
            <summary>
            Returns an exact duplicate of this Wait DI instance.
            </summary>
            <returns> 
            A deep copy of the Wait DI instance.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Wait DI instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Wait DI instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Wait DI instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Wait Di instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitDI.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitDI.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitDI.Value">
            <summary>
            Gets or sets the desired state of the digital input signal.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitDI.Name">
            <summary>
            Gets or sets the name of the digital input signal.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitDI.MaxTime">
            <summary>
            Gets or sets te max. time to wait in seconds.
            </summary>
            <remarks>
            Set a negative value to wait forever (default is -1).
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitDI.TimeFlag">
            <summary>
            Gets or sets the timeout flag.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput">
            <summary>
            Represents a Set Digital Output instruction. 
            </summary>
            <remarks>
            This action is used to set the value (state) of a digital output signal.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.#ctor">
            <summary>
            Initializes an empty instance of the Set Digital Output class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Set Digital Output class.
            </summary>
            <param name="name"> The name of the Digital Output signal. </param>
            <param name="value"> Specifies whether the Digital Output is active. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.#ctor(RobotComponents.ABB.Actions.Instructions.SetDigitalOutput)">
            <summary>
            Initializes a new instance of the Set Digital Output class by duplicating an existing Set Digital Output instance. 
            </summary>
            <param name="setDigitalOutput"> The Set Digital Output instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.Duplicate">
            <summary>
            Returns an exact duplicate of this Set Digital Output instance.
            </summary>
            <returns> 
            A deep copy of the Set Digital Output instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Set Digital Output instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Set Digital Output instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Set Digital Output instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Set Digital Output instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.Name">
            <summary>
            Gets or sets the name of the digital output signal.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.Delay">
            <summary>
            Gets or set the delay the change for the amount of time given in seconds.
            </summary>
            <remarks>
            The maximum delay is 2000 seconds.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.Sync">
            <summary>
            Gets or sets the synchronization value.
            </summary>
            <remarks>
            If this argument is used then the program execution will wait 
            until the signal is physically set to the specified value.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.SetDigitalOutput.Value">
            <summary>
            Gets or sets a value indicating whether the digital output is active.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.WaitTime">
            <summary>
            Represent the Wait Time instruction.
            </summary>
            <remarks>
            This action is used to wait a given amount of time between two actions.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.#ctor">
            <summary>
            Initializes an empty instance of the Wait Time class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes an empty instance of the Wait Time class.
            </summary>
            <param name="duration"> The time, expressed in seconds, that program execution is to wait. </param>
            <param name="inPosition"> Specifies whether or not the mechanial units must have come to a standstill before the wait time starts. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.#ctor(RobotComponents.ABB.Actions.Instructions.WaitTime)">
            <summary>
            Initializes a new instance of the Wait Time class by duplicating an existing Wait Time instance. 
            </summary>
            <param name="waitTime"> The Wait Time instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.Duplicate">
            <summary>
            Returns an exact duplicate of this Wait Time instance.
            </summary>
            <returns> 
            A deep copy of the Wait Time instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Wait Time instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Wait Time instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Wait Time instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Wait Time instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.WaitTime.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitTime.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitTime.Duration">
            <summary>
            Gets or sets the time, expressed in seconds, that program execution is to wait. 
            </summary>
            <remarks>
            Min. value 0 seconds. Max. value no limit. Resolution 0.001 seconds.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.WaitTime.InPosition">
            <summary>
            Gets or sets a value indicating whether or not the robot and external axes must have come to a standstill 
            before this program task starts waiting for other program tasks to reach its meeting point.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool">
            <summary>
            Represents the Override Robot Tool action.
            </summary>
            <remarks>
            This action is used to set a new default Robot Tool from this action. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.#ctor">
            <summary>
            Initializes an empty instance of the Override Robot Tool class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.#ctor(RobotComponents.ABB.Definitions.RobotTool)">
            <summary>
            Initializes a new instance of the Override Robot Tool class.
            </summary>
            <param name="robotTool"> The Robot Tool that should be set. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.#ctor(RobotComponents.ABB.Actions.Instructions.OverrideRobotTool)">
            <summary>
            Initializes a new instance of the Override Robot Tool class by duplicating an existing Override Robot Tool instance. 
            </summary>
            <param name="overrideRobotTool"> The Override Robot Tool instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.Duplicate">
            <summary>
            Returns an exact duplicate of this Override Robot Tool instance.
            </summary>
            <returns> 
            A deep copy of the Override Robot Tool instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.DuplicateInstruction">
            <summary>
            Returns an exact duplicate of this Override Robot Tool instance as IInstruction.
            </summary>
            <returns> 
            A deep copy of the Override Robot Tool instance as an IInstruction. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Override Robot Tool instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Override Robot Tool instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            An empty string. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.RobotTool">
            <summary>
            Gets or sets the Robot Tool.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Instructions.OverrideRobotTool.ToolName">
            <summary>
            Gets the name of the Robot Tool.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Dynamic.IDynamic">
            <summary>
            Represents the interface for different dynamic action types.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.IDynamic.DuplicateDynamic">
            <summary>
            Returns an exact duplicate of this dynamic action.
            </summary>
            <returns> 
            The exact copy of this dynamic action.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.IDynamic.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.IDynamic.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.IDynamic.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.IDynamic.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.IDynamic.Type">
            <summary>
            Gets or sets the Code Type.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Dynamic.CodeLine">
            <summary>
            Represents a custom (user definied) RAPID Code Line.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.#ctor">
            <summary>
            Initializes a empty instance of the Code Line class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Code Line class with the Code Type set as instruction.
            </summary>
            <param name="code"> The custom RAPID code line. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.#ctor(System.String,RobotComponents.ABB.Enumerations.CodeType)">
            <summary>
            Initializes a new instance of the Code Line class
            </summary>
            <param name="code"> The custom RAPID code line. </param>
            <param name="type"> The Code Type. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.#ctor(RobotComponents.ABB.Actions.Dynamic.CodeLine)">
            <summary>
            Initializes a new instance of the Code Line class by duplicating an existing Code Line instance. 
            </summary>
            <param name="codeLine"> The Code Line instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.Duplicate">
            <summary>
            Returns an exact duplicate of this Code Line instance.
            </summary>
            <returns> 
            A deep copy of the Code Line instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.DuplicateDynamic">
            <summary>
            Returns an exact duplicate of this Code Line instance as IDynamic. 
            </summary>
            <returns> 
            A deep copy of the Code Line instance as an IDynamic. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Code Line instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Code Line instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.CodeLine.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.CodeLine.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.CodeLine.Code">
            <summary>
            Gets or sets the custom RAPID Code Line text.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.CodeLine.Type">
            <summary>
            Gets or sets the Code Type.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.Dynamic.Comment">
            <summary>
            Represents a comment in RAPID code.
            </summary>
            <remarks>
            This action is only used to make the program easier to understand. 
            It has no effect on the execution of the program.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.#ctor">
            <summary>
            Initializes an empty instance of the Comment class. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Comment class with the Code Type set as instruction.
            </summary>
            <param name="comment"> The comment. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.#ctor(System.String,RobotComponents.ABB.Enumerations.CodeType)">
            <summary>
            Initializes a new instance of the Comment class.
            </summary>
            <param name="comment"> the comment. </param>
            <param name="type"> The Code Type. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.#ctor(RobotComponents.ABB.Actions.Dynamic.Comment)">
            <summary>
            Initializes a new instance of the Comment class by duplicating an existing Comment instance. 
            </summary>
            <param name="comment"> The Comment instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.Duplicate">
            <summary>
            Returns an exact duplicate of this Comment instance.
            </summary>
            <returns> 
            A deep copy of the Comment instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.DuplicateDynamic">
            <summary>
            Returns an exact duplicate of this Comment instance as IDynamic. 
            </summary>
            <returns> 
            A deep copy of the Comment instance as an IDynamic. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Comment instance as an Action. 
            </summary>
            <returns> 
            A deep copy of the Comment instance as an Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.Dynamic.Comment.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.Comment.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.Comment.Com">
            <summary>
            Gets or sets the comment text.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.Dynamic.Comment.Type">
            <summary>
            Gets or sets the comment Code Type.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.IAction">
            <summary>
            Represents the interfaace for all actions (declarations and instructions).
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.IAction.DuplicateAction">
            <summary>
            Returns an exact duplicate of this Action.
            </summary>
            <returns> 
            The exact copy of this Action. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.IAction.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.IAction.ToRAPIDInstruction(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID instruction code line of the this action. 
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.IAction.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Actions.IAction.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Actions.RAPIDGenerator">
            <summary>
            Represents the RAPID Generator.
            </summary>
            <remarks>
            This is class is used to generate the RAPID module from a given set of actions.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.#ctor">
            <summary>
            Initializes an empty instance of the RAPID Generator class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.#ctor(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Initializes a new instance of the RAPID Generator class with a main routine.
            </summary>
            <param name="robot"> The robot info wherefore the code should be created. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.#ctor(RobotComponents.ABB.Definitions.Robot,System.String,System.String)">
            <summary>
            Initializes a new instance of the RAPID Generator class with custom names.
            </summary>
            <param name="robot"> The robot info wherefore the code should be created. </param>
            <param name="moduleName"> The name of the program module </param>
            <param name="routineName"> The name of the RAPID procedure </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.#ctor(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Initializes a new instance of the RAPID Generator class by duplicating an existing RAPID Generator instance. 
            </summary>
            <param name="generator"> The RAPID Generator instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.Duplicate">
            <summary>
            Returns an exact duplicate of this RAPID Generator instance.
            </summary>
            <returns> 
            A deep copy of the RAPID Generator instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.CreateModule(System.Collections.Generic.IList{RobotComponents.ABB.Actions.IAction},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the RAPID module.
            </summary>
            <param name="actions"> The list with robot actions wherefore the code will be created. </param>
            <param name="addTooldata"> Specifies if the tooldata should be added to the RAPID module. </param>
            <param name="addWobjdata"> Specifies if the wobjdata should be added to the RAPID module. </param>
            <param name="addLoaddata"> Specifies if the loaddata should be added to the RAPID module. </param>
            <returns> 
            The RAPID module as a list with code lines.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.WriteModuleToFile(System.String)">
            <summary>
            Writes the RAPID module to a file.
            </summary>
            <param name="path"> The path. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Actions.RAPIDGenerator.CheckFirstMovement(System.Collections.Generic.IList{RobotComponents.ABB.Actions.IAction})">
            <summary>
            Checks whether the first movement type is an absolute joint movement.
            </summary>
            <remarks>
            If the no movements were defined the method returns true.
            </remarks>
            <param name="actions"> The list with actions to check. </param>
            <returns> 
            Specifies whether the first movement type is an absolute joint movement. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.Robot">
            <summary>
            Gets or sets the Robot. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ModuleName">
            <summary>
            Gets or sets the name of the RAPID module.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProcedureName">
            <summary>
            Gets or sets the name of the RAPID procedure.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.Module">
            <summary>
            Gets the RAPID module as a list with code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ErrorText">
            <summary>
            Gets the collected error messages. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.IsFirstMovementMoveAbsJ">
            <summary>
            Gets a value indicating whether or not the first movement is an Absolute Joint Movement.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.IsSynchronized">
            <summary>
            Gets or sets a value indicating whether or not the movements are synchronized. 
            </summary>
            <remarks>
            Value is set inside the SyncMoveOn and SyncMoveOff instructions.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ConfigurationDatas">
            <summary>
            Gets the collection with unique Configuration Datas used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.SpeedDatas">
            <summary>
            Gets the collection with unique Speed Datas used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ZoneDatas">
            <summary>
            Gets the collection with unique Zone Datas used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.JointPositions">
            <summary>
            Gets the collection with unique Joint Positions used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.Targets">
            <summary>
            Gets the collection with unique Targets used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.RobotTools">
            <summary>
            Gets the collection with unique Robot Tools used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.LoadDatas">
            <summary>
            Gets the collection with unique Load Datas used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.WorkObjects">
            <summary>
            Gets the collection with unique Work Objects used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.TaskLists">
            <summary>
            Gets the collection with unique Task Lists used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.Syncidents">
            <summary>
            Gets the collection with unique syncidents used to create the RAPID program module. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramDeclarations">
            <summary>
            Gets the program declarations as list with RAPID code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramDeclarationComments">
            <summary>
            Gets the program declarations commments as list with RAPID code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramDeclarationCustomCodeLines">
            <summary>
            Gets the program declarations custom code lines as list with RAPID code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramDeclarationsMultiMove">
            <summary>
            Gets the program declarations for multi move programming as a list with RAPID code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramDeclarationsToolData">
            <summary>
            Gets the RAPID tooldata code lines as list with RAPID code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramDeclarationsLoadData">
            <summary>
            Gets the RAPID loaddata code lines as list with RAPID code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramDeclarationsWorkObjectData">
            <summary>
            Gets the RAPID wobjdata code lines as list with RAPID code lines.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Actions.RAPIDGenerator.ProgramInstructions">
            <summary>
            Gets the program instructions as a list with RAPID code lines.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.LoadData">
            <summary>
            Represent Load Data.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.#ctor">
            <summary>
            Initializes a new instance of the Load Data class with the default load load0.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.#ctor(System.String,System.Double,Rhino.Geometry.Point3d,Rhino.Geometry.Quaternion,Rhino.Geometry.Vector3d)">
            <summary>
            Initializes a new instance of the Load Data class.
            </summary>
            <param name="name"> The variable name of the load data declaration. </param>
            <param name="mass"> The weight of the tool in kg. </param>
            <param name="centerOfGravity"> The position of the center of gravity of the load. </param>
            <param name="axesOfMoment"> The orientation of the load coordinate system defined by the principal inertial axes of the tool load. </param>
            <param name="inertialMoments"> The moment of inertia of the load in kgm2. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.#ctor(RobotComponents.ABB.Definitions.LoadData)">
            <summary>
            Initializes a new instance of the Load Data class by duplicating an existing Load Data instance. 
            </summary>
            <param name="loadData"> The Load Data instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.Duplicate">
            <summary>
            Returns an exact duplicate of this Load Data instance.
            </summary>
            <returns> A deep copy of the Load Data instance. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Load Data instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Load Data instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Load DAta class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"></param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.Parse(System.String)">
            <summary>
            Returns a Load Data instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.TryParse(System.String,RobotComponents.ABB.Definitions.LoadData@)">
            <summary>
            Attempts to parse a RAPID data string into a Load Data instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="loadData"> The Load Data intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.ToRAPID">
            <summary>
            Returns the loaddata in RAPID code format.
            </summary>
            <remarks>
            An exmaple output is "[ 5, [50, 0, 50], [1, 0, 0, 0], 0, 0, 0]".
            </remarks>
            <returns> 
            The string with loaddata values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.ToRAPIDDeclaration">
            <summary>
            Returns the RAPID declaration code line of the this Load Data.
            </summary>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.LoadData.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.Name">
            <summary>
            Gets or sets the load data name.
            </summary>
            <remarks>
            Each name has to be unique.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.Mass">
            <summary>
            Gets or sets the weight of the load in kg.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.CenterOfGravity">
            <summary>
            Gets or sets the position of the center of gravity of the load.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.AxesOfMoment">
            <summary>
            Gets or sets the orientation of the load coordinate system defined by the principal inertial axes of the tool load. 
            </summary>
            <remarks>
            Expressed in the wrist coordinate system as a quaternion (q1, q2, q3, q4).
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.LoadData.InertialMoments">
            <summary>
            Gets or set the moment of inertia of the load in kgm2.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.IExternalAxis">
            <summary>
            Represents the interface for External Axes. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.DuplicateExternalAxis">
            <summary>
            Returns an exact duplicate of this External Axis.
            </summary>
            <returns> 
            A deep copy of the External Axis. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.DuplicateExternalAxisWithoutMesh">
            <summary>
            Returns an exact duplicate of this External Axis without meshes.
            </summary>
            <returns> 
            A deep copy of the External Axis without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.DuplicateMechanicalUnit">
            <summary>
            Returns an exact duplicate of this Mechanical Unit.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.DuplicateMechanicalUnitWithoutMesh">
            <summary>
            Returns an exact duplicate of this Mechanical Unit without meshes.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.CalculatePosition(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Boolean@)">
            <summary>
            Calculates the position of the attachment plane for a given External Joint Position.
            </summary>
            <remarks>
            This calculation does not take into account the axis limits. 
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <param name="isInLimits"> Specifies whether the External Joint Position is inside its limits. </param>
            <returns> 
            The posed attachement plane. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.CalculateTransformationMatrix(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Boolean@)">
            <summary>
            Calculates the the transformation matrix for a given External Joint Position.. 
            </summary>
            <remarks>
            This calculation does not take into account the axis limits. 
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <param name="isInLimits"> Specifies whether the External Joint Position is inside its limits. </param>
            <returns> 
            The transformation matrix.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.CalculatePositionSave(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Calculates the position of the attachment plane for a given External Joint Position..  
            </summary>
            <remarks>
            This calculations takes into account the external axis limits. 
            If the defined External Joint Posiiton is outside its limits the closest valid external axis value will be used. 
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> 
            The posed attachement plane. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.CalculateTransformationMatrixSave(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Calculates the the transformation matrix for a given External Joint Position.
            </summary>
            <remarks>
            This calculations takes into account the external axis limits. 
            If the defined External Joint Posiiton is outside its limits the closest valid external axis value will be used. 
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> 
            The transformation matrix. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.ReInitialize">
            <summary>
            Reinitializes the fields and properties to construct valid External Axis instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.PoseMeshes(RobotComponents.ABB.Actions.Declarations.JointTarget)">
            <summary>
            Calculates and returns the position of the meshes for a given Joint Target.
            </summary>
            <param name="jointTarget"> The Joint Target. </param>
            <returns> 
            The posed meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.PoseMeshes(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Calculates the position of the external axis meshes for a given External Joint Position.
            </summary>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> 
            The posed meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the external axis spatial properties (planes and meshes). 
            </summary>
            <param name="xform"> The spatial deform. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IExternalAxis.GetBoundingBox(System.Boolean)">
            <summary>
            Returns the Bounding Box of the object.
            </summary>
            <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>
            <returns> 
            The Bounding Box. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.Name">
            <summary>
            Gets or sets the external axis name. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.AxisLimits">
            <summary>
            Gets or sets the axis limits.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.AxisType">
            <summary>
            Gets the Axis Type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.AttachmentPlane">
            <summary>
            Gets or sets the attachment plane to attach a robot or work object.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.AxisPlane">
            <summary>
            Gets or sets the axis plane.
            </summary>
            <remarks>
            In case of a rotational axis the z-axis of the plane defines the rotation center. 
            In case of linear axis the z-axis of the plane defines the movement direction.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.AxisNumber">
            <summary>
            Gets or sets the axis logic as a number (-1, 0, 1, 2, 3, 4, 5).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.AxisLogic">
            <summary>
            Gets the axis logic as a char (-, A, B, C, E, E, F).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.BaseMesh">
            <summary>
            Gets or sets the fixed base mesh of the external axis. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.LinkMesh">
            <summary>
            Gets or sets the movable link mesh of the external axis posed for external axis value set to 0. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.PosedMeshes">
            <summary>
            Gets latest calculated posed axis meshes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.MovesRobot">
            <summary>
            Gets a value indicating whether or not this External Axis moves the Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IExternalAxis.NumberOfAxes">
            <summary>
            Gets the number of axes for the mechanical unit.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.IMechanicalUnit">
            <summary>
            Represent the interface of mechanical units
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IMechanicalUnit.DuplicateMechanicalUnit">
            <summary>
            Returns an exact duplicate of this Mechanical Unit.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IMechanicalUnit.DuplicateMechanicalUnitWithoutMesh">
            <summary>
            Returns an exact duplicate of this Mechanical Unit without meshes.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IMechanicalUnit.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IMechanicalUnit.PoseMeshes(RobotComponents.ABB.Actions.Declarations.JointTarget)">
            <summary>
            Calculates and returns the position of the meshes for a given Joint Target.
            </summary>
            <param name="jointTarget"> The Joint Target. </param>
            <returns> 
            The posed meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IMechanicalUnit.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the external axis spatial properties (planes and meshes). 
            </summary>
            <param name="xform"> The spatial deform. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.IMechanicalUnit.GetBoundingBox(System.Boolean)">
            <summary>
            Returns the Bounding Box of the object.
            </summary>
            <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>
            <returns> 
            The Bounding Box. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IMechanicalUnit.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IMechanicalUnit.Name">
            <summary>
            Gets or sets the external axis name. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.IMechanicalUnit.NumberOfAxes">
            <summary>
            Gets the number of axes for the mechanical unit.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.RobotTool">
            <summary>
            Represents a Robot Tool.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor">
            <summary>
            Initializes a new instance of the Robot Tool class with the default tool tool0.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor(System.String,Rhino.Geometry.Mesh,Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Initializes a new instance of the Robot Tool class from planes.
            </summary>
            <remarks>
            Sets the loaddata as load0.
            </remarks>
            <param name="name"> The tool name, must be unique. </param>
            <param name="mesh"> The tool mesh. </param>
            <param name="attachmentPlane"> The attachement plane. </param>
            <param name="toolPlane"> The tool center point and tool orientation as a plane. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor(System.String,System.Collections.Generic.IList{Rhino.Geometry.Mesh},Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Initializes a new instance of the Robot Tool class from planes.
            </summary>
            <remarks>
            Sets the loaddata as load0.
            </remarks>
            <param name="name"> The tool name, must be unique. </param>
            <param name="meshes"> The tool mesh as The list with robot meshes. </param>
            <param name="attachmentPlane"> The attachement plane. </param>
            <param name="toolPlane"> The tool center point and tool orientation as a plane. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor(System.String,Rhino.Geometry.Mesh,Rhino.Geometry.Plane,Rhino.Geometry.Plane,RobotComponents.ABB.Definitions.LoadData)">
            <summary>
            Initializes a new instance of the Robot Tool class from planes.
            </summary>
            <remarks>
            Sets the loaddata as load0.
            </remarks>
            <param name="name"> The tool name, must be unique. </param>
            <param name="mesh"> The tool mesh. </param>
            <param name="attachmentPlane"> The attachement plane. </param>
            <param name="toolPlane"> The tool center point and tool orientation as a plane. </param>
            <param name="loadData"> The tool loaddata as load data. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor(System.String,System.Collections.Generic.IList{Rhino.Geometry.Mesh},Rhino.Geometry.Plane,Rhino.Geometry.Plane,RobotComponents.ABB.Definitions.LoadData)">
            <summary>
            Initializes a new instance of the Robot Tool class from planes.
            </summary>
            <remarks>
            Sets the loaddata as load0.
            </remarks>
            <param name="name"> The tool name, must be unique. </param>
            <param name="meshes"> The tool mesh as The list with robot meshes. </param>
            <param name="attachmentPlane"> The attachement plane. </param>
            <param name="toolPlane"> The tool center point and tool orientation as a plane. </param>
            <param name="loadData"> The tool loaddata as load data. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor(RobotComponents.ABB.Definitions.RobotTool,System.Boolean)">
            <summary>
            Initializes a new instance of the Robot Tool class by duplicating an existing Robot Tool instance. 
            </summary>
            <param name="robotTool"> The Robot Tool instance to duplicate. </param>
            <param name="duplicateMesh"> Specifies whether the meshes should be duplicated. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.Duplicate">
            <summary>
            Returns an exact duplicate of this Robot Tool instance.
            </summary>
            <returns> 
            A deep copy of the Robot Tool instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.DuplicateWithoutMesh">
            <summary>
            Returns an exact duplicate of this Robot Tool instance without meshes.
            </summary>
            <returns> 
            A deep copy of the Robot Tool instance without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Robot Tool instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Robot Tool instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.GetEmptyRobotTool">
            <summary>
            Returns an empty Robot Tool instance.
            </summary>
            <returns> 
            The empty Robot Tool.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Robot Tool class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"> The RAPID data string. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.Parse(System.String)">
            <summary>
            Returns a Robot Tool instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.TryParse(System.String,RobotComponents.ABB.Definitions.RobotTool@)">
            <summary>
            Attempts to parse a RAPID data string into a Robot Tool instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="robotTool"> The Robot Tool intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.Initialize">
            <summary>
            Initializes the fields and properties to construct a valid Robot Tool istance.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.ReInitialize">
            <summary>
            Reinitializes the fields and properties to construct a valid Robot Tool instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.CalculateToolPosition">
            <summary>
            Calculates and returns the tool center point relative to the defined attachment plane. 
            </summary>
            <returns> 
            The tool center point. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.CalculateToolOrientation">
            <summary>
            Calculates and returns the tool center orientation relative to the defined attachment plane. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.ToRAPID">
            <summary>
            Returns the tooldata in RAPID code format, e.g. 
            </summary>
            <remarks>
            Example outputs are 
            "[TRUE, [[215.448, 3.171, 102.332], [0.5, 0.5, 0.5, 0.5]], [0.001, [0, 0, 0.001], [1, 0, 0, 0], 0, 0, 0]] and 
            "[TRUE, [[215.448, 3.171, 102.332], [0.5, 0.5, 0.5, 0.5]], load1]
            </remarks>
            <returns> 
            The string with tooldata values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.ToRAPIDDeclaration">
            <summary>
            Returns the RAPID declaration code line of the this Robot Tool.
            </summary>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.Clear">
            <summary>
            Clears all the fields and properties of the current instance.
            </summary>
            <remarks>
            Typically used for defining an empty Robot Tool instance 
            since the empty constructor creates the default Robot Tool tool0.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the Robot Tool spatial properties (planes and meshes). 
            </summary>
            <param name="xform"> The spatial deform. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.RobotTool.GetBoundingBox(System.Boolean)">
            <summary>
            Returns the Bounding Box of the object.
            </summary>
            <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>
            <returns> 
            The Bounding Box. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.Name">
            <summary>
            Gets or sets the tool name.
            </summary>
            <remarks>
            Each name has to be unique.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.Mesh">
            <summary>
            Gets or sets the mesh.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.AttachmentPlane">
            <summary>
            Gets or sets the tool attachment plane.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.ToolPlane">
            <summary>
            Gets or sets the position and orientaton of the tool center point. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.RobotHold">
            <summary>
            Gets or sets a value indicating whether the robot is holding the tool.
            </summary>
            <remarks>
            Use true if the robot is holding the tool. 
            Use false if the robot is not holding the tool (e.g. stationary tool).
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.RobotTool.LoadData">
            <summary>
            Gets or sets the load data.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.WorkObject">
            <summary>
            Represents a Work Object.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.#ctor">
            <summary>
            Initializes a new instance of the Work Object class with the default work object wobj0. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane)">
            <summary>
            Initializes a new instance of the Work Object class with a fixed work object.
            </summary>
            <param name="name"> The work object name, must be unique. </param>
            <param name="plane"> The work object coordinate system. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.#ctor(System.String,Rhino.Geometry.Plane,RobotComponents.ABB.Definitions.IExternalAxis)">
            <summary>
            Initializes a new instance of the Work Object class with a movable work object.
            </summary>
            <param name="name"> The work object name, must be unique. </param>
            <param name="plane"> The work object coordinate system. </param>
            <param name="externalAxis"> The coupled external axis (mechanical unit) that moves the work object. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.#ctor(RobotComponents.ABB.Definitions.WorkObject,System.Boolean)">
            <summary>
            Initializes a new instance of the Work Object class by duplicating an existing Work Object instance. 
            </summary>
            <param name="workObject"> The Work Object instance to duplicate. </param>
            <param name="duplicateMesh"> Specifies whether the meshes should be duplicated. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.Duplicate">
            <summary>
            Returns an exact duplicate of this Work Object instance.
            </summary>
            <returns> 
            A deep copy of the Work Object instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.DuplicateWithoutMesh">
            <summary>
            Returns an exact duplicate of this Work Object instance without meshes.
            </summary>
            <returns> 
            A deep copy of the Work Object instance without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.DuplicateDeclaration">
            <summary>
            Returns an exact duplicate of this Work Object instance as an IDeclaration.
            </summary>
            <returns> 
            A deep copy of the Work Object instance as an IDeclaration. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Work Object class from a rapid data string.
            </summary>
            <remarks>
            Only used for the Parse and TryParse methods. Therefore, this constructor is private. 
            </remarks>
            <param name="rapidData"> The RAPID data string. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.Parse(System.String)">
            <summary>
            Returns a Work Object instance constructed from a RAPID data string. 
            </summary>
            <param name="rapidData"> The RAPID data string. s</param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.TryParse(System.String,RobotComponents.ABB.Definitions.WorkObject@)">
            <summary>
            Attempts to parse a RAPID data string into a Work Object instance.  
            </summary>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="workObject"> The Work Object intance. </param>
            <returns> 
            True on success, false on failure. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.CalculateOrientation">
            <summary>
            Calculates and returns the quaternion orientation of the work object coordinate system. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.CalculateUserFrameOrientation">
            <summary>
            Calculates and returns the quaternion orientation of the user frame coordinate system. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.CalculateGlobalWorkObjectPlane">
            <summary>
            Calculates and returns the global work object plane. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.Initialize">
            <summary>
            Initializes the fields and properties to construct a valid Work Object instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.ReInitialize">
            <summary>
            Reinitializes the fields and properties to construct a valid Work Object instance.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.ToRAPID">
            <summary>
            Returns the Configuration Data in RAPID code format.
            </summary>
            <remarks>
            An example output is 
            "[FALSE, TRUE, "", [[0, 0, 0], [1, 0, 0, 0]], [[0.0009, -0.0082, 8.0304], [0.9999999, 0.0005131, 0.0000556, 0]]]"
            </remarks>
            <returns> 
            The RAPID data string with work object values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.ToRAPIDDeclaration">
            <summary>
            Returns the RAPID declaration code line of the this Work Object.
            </summary>
            <returns> 
            The RAPID code line. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.ToRAPIDDeclaration(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Returns the RAPID declaration code line of the this action.
            </summary>
            <param name="robot"> The Robot were the code is generated for. </param>
            <returns> 
            The RAPID code line in case a variable name is defined. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.WorkObject.ToRAPIDGenerator(RobotComponents.ABB.Actions.RAPIDGenerator)">
            <summary>
            Creates declarations and instructions in the RAPID program module inside the RAPID Generator.
            </summary>
            <remarks>
            This method is called inside the RAPID generator.
            </remarks>
            <param name="RAPIDGenerator"> The RAPID Generator. </param>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.Scope">
            <summary>
            Gets or sets the scope. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.VariableType">
            <summary>
            Gets or sets the variable type. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.Datatype">
            <summary>
            Gets the RAPID datatype. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.Name">
            <summary>
            Gets or sets the name of the workobject.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.RobotHold">
            <summary>
            Gets a value indicating whether or not the robot is holding the work object. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.UserFrame">
            <summary>
            Gets or sets the user coordinate system, i.e. the position of the current work surface or fixture.
            </summary>
            <remarks>
            If the robot is holding the tool, the user coordinate system is defined in the 
            world coordinate system (in the wrist coordinate system if a stationary tool is used). 
            For movable user frame (FixedFrame = false), the user frame is continuously defined by the system.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.Plane">
            <summary>
            Gets or set the work object coordinate system as a plane (e.g. the position of the current work object).
            </summary>
            <remarks>
            The object coordinate system is defined in the user coordinate system.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.ExternalAxis">
            <summary>
            Gets or sets the external axis (mechanical unit) with which the robot movements are coordinated. 
            </summary>
            <remarks>
            Only specified in the case of movable user coordinate systems.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.FixedFrame">
            <summary>
            Gets a value indicating whether or not a fixed user coordinate system is used.
            </summary>
            <remarks>
            True indicates that the user frame is fixed. 
            False indicates that the user coordinate system is movable (e.g. coordinated external axes).s
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.WorkObject.GlobalWorkObjectPlane">
            <summary>
            Gets the global work object plane.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.ExternalLinearAxis">
            <summary>
            Represents an External Linear Axis.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor">
            <summary>
            Initializes an empty instance of the External Linear Axis class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new instance of the External Linear Axis class with empty meshes.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh})">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh})">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class with empty meshes.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class with empty meshes.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axis"> The positive movement direction. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class.
            </summary>
            <param name="name"> The External Axis name. </param>
            <param name="attachmentPlane" > The attachment plane posed at the location for axis value 0. </param>
            <param name="axisPlane"> The axis plane. The Z-axis defines the positive movement direction of the axis. </param>
            <param name="axisLimits"> The movement limits of the external linear axis. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.#ctor(RobotComponents.ABB.Definitions.ExternalLinearAxis,System.Boolean)">
            <summary>
            Initializes a new instance of the External Linear Axis class by duplicating an existing External Linear Axis instance. 
            </summary>
            <param name="externalLinearAxis"> The External Linear Axis instance to duplicate. </param>
            <param name="duplicateMesh"> Specifies whether the meshes should be duplicated. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.Duplicate">
            <summary>
            Returns an exact duplicate of this External Linear Axis instance.
            </summary>
            <returns> 
            A deep copy of the External Linear Axis instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.DuplicateWithoutMesh">
            <summary>
            Returns an exact duplicate of this External Linear Axis instance without meshes.
            </summary>
            <returns> 
            A deep copy of the External Linear Axis instance without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.DuplicateExternalAxis">
            <summary>
            Returns an exact duplicate of this External Linear Axis instance as an External Axis.
            </summary>
            <returns> 
            A deep copy of the External Linear Axis instance as an External Axis. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.DuplicateExternalAxisWithoutMesh">
            <summary>
            Returns an exact duplicate of this External Linear Axis instance as an External Axis without meshes.
            </summary>
            <returns> 
            A deep copy of the External Linear Axis instance as an External Axis without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.DuplicateMechanicalUnit">
            <summary>
            Returns an exact duplicate of this External Linear Axis as a Mechanical Unit.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.DuplicateMechanicalUnitWithoutMesh">
            <summary>
            Returns an exact duplicate of this External Linear Axis as Mechanical Unit without meshes.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.SetAxisNumberFromString(System.String)">
            <summary>
            Sets the axis logic number from a string. 
            </summary>
            <remarks>
            Only used in constructors.
            </remarks>
            <param name="text"> The string with the axis logic number. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.GetAxisCurve">
            <summary>
            Gets the axis curve. The direction of the curve defines the movement direction and the spatial limits of the attachement plane.
            </summary>
            <returns> 
            The axis curve. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.CalculatePosition(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Boolean@)">
            <summary>
            Returns the position of the attachment plane for a given External Joint Position.
            </summary>
            <remarks>
            This calculation does not take into account the axis limits.
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <param name="isInLimits"> Specifies whether the External Joint Position is inside its limits. </param>
            <returns> 
            The posed attachement plane. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.CalculateTransformationMatrix(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Boolean@)">
            <summary>
            Returns the the transformation matrix for a given External Joint Position.
            </summary>
            <remarks>
            This calculation does not take into account the axis limits. 
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <param name="isInLimits"> Specifies whether the External Joint Position is inside its limits. </param>
            <returns> 
            The transformation matrix. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.CalculatePositionSave(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Returns the position of the attachment plane for a given External Joint Position. 
            </summary>
            <remarks>
            This calculations takes into account the external axis limits. 
            If the defined External Joint Posiiton is outside its limits the closest valid external axis value will be used. 
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> 
            The posed attachement plane. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.CalculateTransformationMatrixSave(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Returns the the transformation matrix for a given External Joint Position. 
            </summary>
            <remarks>
            This calculations takes into account the external axis limits. 
            If the defined External Joint Posiiton is outside its limits the closest valid external axis value will be used. 
            </remarks>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> 
            The transformation matrix. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.PoseMeshes(RobotComponents.ABB.Actions.Declarations.JointTarget)">
            <summary>
            Calculates and returns the position of the meshes for a given Joint Target.
            </summary>
            <param name="jointTarget"> The Joint Target. </param>
            <returns> 
            The posed meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.PoseMeshes(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Calculates and returns the position of the external axis meshes for a given External Joint Position.
            </summary>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> 
            The posed meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.Initialize">
            <summary>
            Initializes the fields and properties to construct a valid External Linear Axis instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.ReInitialize">
            <summary>
            Reinitializes the fields and properties to construct a valid External Linear Axis instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the external axis spatial properties (planes and meshes). 
            </summary>
            <param name="xform"> The spatial deform. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalLinearAxis.GetBoundingBox(System.Boolean)">
            <summary>
            Returns the Bounding Box of the object.
            </summary>
            <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>
            <returns> 
            The Bounding Box. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.Name">
            <summary>
            Gets or sets the external axis name. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.AttachmentPlane">
            <summary>
            Gets or sets the attachment plane to attach a robot or work object.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.AxisPlane">
            <summary>
            Gets or sets the axis plane.
            </summary>
            <remarks>
            The z-axis of the place defines the positive movement direction of the external linear axis.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.AxisLimits">
            <summary>
            Gets or sets the axis limits in meters.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.AxisNumber">
            <summary>
            Gets or sets the axis logic as a number (-1, 0, 1, 2, 3, 4, 5).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.AxisLogic">
            <summary>
            Gets the axis logic as a char (-, A, B, C, E, E, F).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.AxisType">
            <summary>
            Gets the Axis Type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.BaseMesh">
            <summary>
            Gets or sets the fixed base mesh of the external axis. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.LinkMesh">
            <summary>
            Gets or sets the movable link mesh of the external axis posed for external axis value set to 0.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.AxisCurve">
            <summary>
            Gets the axis curve. 
            </summary>
            <remarks>
            The direction of the curve defines the movement direction and the spatial limits of the attachement plane.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.PosedMeshes">
            <summary>
            Gets latest calculated posed axis meshes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.MovesRobot">
            <summary>
            Gets or sets a value indicating whether or not this External Linear Axis moves the Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalLinearAxis.NumberOfAxes">
            <summary>
            Gets the number of axes for the mechanical unit.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.ExternalRotationalAxis">
            <summary>
            Represents an External Rotational Axis.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor">
            <summary>
            Initializes an empty instance of the External Rotational Axis class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new instance of the External Rotational Axis class with empty meshes.
            </summary>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Initializes a new instance of the External Rotational Axis class.
            </summary>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Initializes a new instance of the External Rotational Axis class.
            </summary>
            <param name="name"> The axis name. </param>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh})">
            <summary>
            Initializes a new instance of the External Rotational Axis class. 
            </summary>
            <param name="name"> The axis name. </param>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation vector. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class with empty meshes.
            </summary>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class.
            </summary>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class.
            </summary>
            <param name="name"> The axis name. </param>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class. 
            </summary>
            <param name="name"> The axis name. </param>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation vector. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class with empty meshes.
            </summary>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class.
            </summary>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class.
            </summary>
            <param name="name"> The axis name. </param>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation center. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMesh"> The base mesh. </param>
            <param name="linkMesh"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(System.String,Rhino.Geometry.Plane,Rhino.Geometry.Interval,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class. 
            </summary>
            <param name="name"> The axis name. </param>
            <param name="axisPlane"> The axis plane. The z-axis of the plane defines the rotation vector. </param>
            <param name="axisLimits"> The motion limits. </param>
            <param name="baseMeshes"> The base mesh. </param>
            <param name="linkMeshes"> The link mesh posed for an external axis value set to 0. </param>
            <param name="axisLogic"> The axis logic number. </param>
            <param name="movesRobot"> Specifies whether the external axis moves a robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.#ctor(RobotComponents.ABB.Definitions.ExternalRotationalAxis,System.Boolean)">
            <summary>
            Initializes a new instance of the External Rotational Axis class by duplicating an existing External Rotational Axis instance. 
            </summary>
            <param name="externalRotationalAxis"> The External Rotational Axis instance to duplicate. </param>
            <param name="duplicateMesh"> Specifies whether the meshes should be duplicated. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.Duplicate">
            <summary>
            Returns an exact duplicate of this External Rotational Axis instance.
            </summary>
            <returns> A deep copy of the External Rotational Axis instance. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.DuplicateWithoutMesh">
            <summary>
            Returns an exact duplicate of this External Rotational Axis instance without meshes.
            </summary>
            <returns> A deep copy of the External Rotational Axis instance without meshes. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.DuplicateExternalAxis">
            <summary>
            Returns an exact duplicate of this External Rotational Axis instance as an External Axis.
            </summary>
            <returns> A deep copy of the External Rotational Axis instance as an External Axis. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.DuplicateExternalAxisWithoutMesh">
            <summary>
            Returns an exact duplicate of this External Rotational Axis instance as an External Axis without meshes.
            </summary>
            <returns> A deep copy of the External Rotational Axis instance as an External Axis without meshes. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.DuplicateMechanicalUnit">
            <summary>
            Returns an exact duplicate of this External Rotational Axis as a Mechanical Unit.
            </summary>
            <returns> A deep copy of the Mechanical Unit. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.DuplicateMechanicalUnitWithoutMesh">
            <summary>
            Returns an exact duplicate of this External Rotational Axis as Mechanical Unit without meshes.
            </summary>
            <returns> A deep copy of the Mechanical Unit without meshes. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.SetAxisNumberFromString(System.String)">
            <summary>
            Sets the axis logic number from a string. 
            Only used in constructors.
            </summary>
            <param name="text"> The string with the axis logic number. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.CalculatePosition(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Boolean@)">
            <summary>
            Returns the position of the attachment plane for a given External Joint Position.
            This calculation does not take into account the axis limits. 
            </summary>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <param name="isInLimits"> Specifies whether the External Joint Position is inside its limits. </param>
            <returns> The posed attachement plane. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.CalculateTransformationMatrix(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,System.Boolean@)">
            <summary>
            Returns the the transformation matrix for a given External Joint Position.
            This calculation does not take into account the axis limits. 
            </summary>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <param name="isInLimits"> Specifies whether the External Joint Position is inside its limits. </param>
            <returns> The transformation matrix. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.CalculatePositionSave(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Returns the position of the attachment plane for a given External Joint Position.
            This calculations takes into account the external axis limits. 
            If the defined External Joint Posiiton is outside its limits the closest valid external axis value will be used.  
            </summary>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> The posed attachement plane. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.CalculateTransformationMatrixSave(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Returns the the transformation matrix for a given External Joint Position.
            This calculations takes into account the external axis limits. 
            If the defined External Joint Posiiton is outside its limits the closest valid external axis value will be used. 
            </summary>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> The transformation matrix. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.PoseMeshes(RobotComponents.ABB.Actions.Declarations.JointTarget)">
            <summary>
            Calculates and returns the position of the meshes for a given Joint Target.
            </summary>
            <param name="jointTarget"> The Joint Target. </param>
            <returns> The posed meshes. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.PoseMeshes(RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Calculates and returns the position of the external axis meshes for a given External Joint Position.
            </summary>
            <param name="externalJointPosition"> The External Joint Position. </param>
            <returns> The posed meshes. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.Initialize">
            <summary>
            Initializes the fields and properties to construct a valid External Rotational Axis instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.ReInitialize">
            <summary>
            Reinitializes the fields and properties to construct a valid External Rotational Axis instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the external rotational axis spatial properties (planes and meshes). 
            </summary>
            <param name="xform"> Spatial deform. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.ExternalRotationalAxis.GetBoundingBox(System.Boolean)">
            <summary>
            Returns the Bounding Box of the object.
            </summary>
            <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>
            <returns> The Bounding Box. </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.Name">
            <summary>
            Gets or sets the external axis name.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.AttachmentPlane">
            <summary>
            Gets or sets the attachment plane to attach a robot or work object. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.AxisPlane">
            <summary>
            Gets or sets the axis plane.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.AxisLimits">
            <summary>
            Gets or sets the axis limits in degrees.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.AxisNumber">
            <summary>
            Gets or sets the axis logic as a number (-1, 0, 1, 2, 3, 4, 5). 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.AxisLogic">
            <summary>
            Gets the axis logic as a char (-, A, B, C, D, E, F).
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.AxisType">
            <summary>
            Gets the Axis Type.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.BaseMesh">
            <summary>
            Gets or sets the fixed base mesh of the external axis. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.LinkMesh">
            <summary>
            Gets or sets the movable link mesh of the external axis posed for external axis value set to 0.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.PosedMeshes">
            <summary>
            Gets latest calculated posed axis meshes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.MovesRobot">
            <summary>
            Gets or sets a value indicating whether or not this External Rotational Axis moves the Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.ExternalRotationalAxis.NumberOfAxes">
            <summary>
            Gets the number of axes for the mechanical unit.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Definitions.Robot">
            <summary>
            Represents a 6-axis spherical Robot.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor needed for deserialization of the object.  
            </summary>
            <param name="info"> The SerializationInfo to extract the data from. </param>
            <param name="context"> The context of this deserialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination for this serialization. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.#ctor">
            <summary>
            Initializes an empty instance of the Robot class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.#ctor(System.String,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Plane},System.Collections.Generic.IList{Rhino.Geometry.Interval},Rhino.Geometry.Plane,Rhino.Geometry.Plane,RobotComponents.ABB.Definitions.RobotTool)">
            <summary>
            Initializes a new instance of the Robot class without attached external axes.
            </summary>
            <param name="name"> The name. </param>
            <param name="meshes"> The base and links meshes defined in the world coorindate space. </param>
            <param name="internalAxisPlanes"> The internal axes planes defined in the world coorindate space. </param>
            <param name="internalAxisLimits"> The internal axes limit. </param>
            <param name="basePlane"> The position and orientation of the robot base in the world coordinate space. </param>
            <param name="mountingFrame"> The tool mounting frame definied in the world coordinate space. </param>
            <param name="tool"> The Robot Tool. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.#ctor(System.String,System.Collections.Generic.IList{Rhino.Geometry.Mesh},System.Collections.Generic.IList{Rhino.Geometry.Plane},System.Collections.Generic.IList{Rhino.Geometry.Interval},Rhino.Geometry.Plane,Rhino.Geometry.Plane,RobotComponents.ABB.Definitions.RobotTool,System.Collections.Generic.IList{RobotComponents.ABB.Definitions.IExternalAxis})">
            <summary>
            Initializes a new instance of the Robot class with attached external axes.
            </summary>
            <param name="name"> The name. </param>
            <param name="meshes"> The base and links meshes defined in the world coorindate space. </param>
            <param name="internalAxisPlanes"> The internal axes planes defined in the world coorindate space. </param>
            <param name="internalAxisLimits"> The internal axes limit. </param>
            <param name="basePlane"> The position and orientation of the robot base in the world coordinate space. </param>
            <param name="mountingFrame"> The tool mounting frame definied in the world coordinate space. </param>
            <param name="tool"> The Robot Tool. </param>
            <param name="externalAxes"> The attached external axes. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.#ctor(RobotComponents.ABB.Definitions.Robot,System.Boolean)">
            <summary>
            Initializes a new instance of the Robot class by duplicating an existing Robot instance. 
            </summary>
            <param name="robot"> The Robot instance to duplicate. </param>
            <param name="duplicateMesh"> Specifies whether the meshes should be duplicated. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.Duplicate">
            <summary>
            Returns an exact duplicate of this Robot instance.
            </summary>
            <returns> 
            A deep copy of the Robot instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.DuplicateMechanicalUnit">
            <summary>
            Returns an exact duplicate of this Robot as a Mechanical Unit.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.DuplicateMechanicalUnitWithoutMesh">
            <summary>
            Returns an exact duplicate of this Robot as Mechanical Unit without meshes.
            </summary>
            <returns> 
            A deep copy of the Mechanical Unit without meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.GetAxisPlanesFromKinematicsParameters(Rhino.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Rhino.Geometry.Plane@)">
            <summary>
            Returns the axis planes for the given kinematics parameters in world coordinate space. 
            </summary>
            <param name="basePlane"> The position and orientation of the robot base in the world coordinate space. </param>
            <param name="a1"> Kinematics parameter A1. </param>
            <param name="a2"> Kinematics parameter A2. </param>
            <param name="a3"> Kinematics parameter A3. </param>
            <param name="b"> Kinematics parameter B. </param>
            <param name="c1"> Kinematics parameter C1. </param>
            <param name="c2"> Kinematics parameter C2. </param>
            <param name="c3"> Kinematics parameter C3. </param>
            <param name="c4"> Kinematics parameter C4. </param>
            <param name="mountingFrame"> The tool mounting frame. </param>
            <returns> The axis planes. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.GetAxisPlanesFromKinematicsParameters(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Rhino.Geometry.Plane@)">
            <summary>
            Returns the axis planes for the given kinematics parameters in local coordinate space. 
            </summary>
            <param name="a1"> Kinematics parameter A1. </param>
            <param name="a2"> Kinematics parameter A2. </param>
            <param name="a3"> Kinematics parameter A3. </param>
            <param name="b"> Kinematics parameter B. </param>
            <param name="c1"> Kinematics parameter C1. </param>
            <param name="c2"> Kinematics parameter C2. </param>
            <param name="c3"> Kinematics parameter C3. </param>
            <param name="c4"> Kinematics parameter C4. </param>
            <param name="mountingFrame"> The tool mounting frame. </param>
            <returns> The axis planes. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.UpdateExternalAxisFields">
            <summary>
            Reinitializes the fields that are related to the attached external axes.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.UpdateKinematicsParameters">
            <summary>
            Reinitializes the fields that are related to the kinematics.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.GetAttachedToolMesh">
            <summary>
            Returns the attached Robot Tool mesh in robot coordinate space.
            </summary>
            <returns> 
            The tool mesh in the robot coordinate space. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.CalculateAttachedToolPlane">
            <summary>
            Calculates and returns the TCP plane of the attached Robot Tool in robot coordinate space.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.PoseMeshes(RobotComponents.ABB.Actions.Declarations.JointTarget)">
            <summary>
            Calculates and returns the position of the meshes for a given Joint Target.
            </summary>
            <param name="jointTarget"> The Joint Target. </param>
            <returns> 
            The posed meshes. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the robot spatial properties (planes and meshes).
            </summary>
            <remarks>
            The attached external axes will not be transformed.
            </remarks>
            <param name="xform"> Spatial deform. </param>
        </member>
        <member name="M:RobotComponents.ABB.Definitions.Robot.GetBoundingBox(System.Boolean)">
            <summary>
            Returns the Bounding Box of the object.
            </summary>
            <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>
            <returns> 
            The Bounding Box. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.Name">
            <summary>
            Gets or sets the name of the Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.Meshes">
            <summary>
            Gets the Robot meshes including the mesh of the attached tool.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.InternalAxisPlanes">
            <summary>
            Gets or sets the internal axis planes.
            </summary>
            <remarks>
            The Z-axes of the planes define the rotation centers.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.InternalAxisLimits">
            <summary>
            Gets or sets the axis limits in degrees.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.BasePlane">
            <summary>
            Gets or sets the position and orientation of the robot in world coordinate space. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.MountingFrame">
            <summary>
            Gets or sets the tool mounting frame in world coordinate space.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.ToolPlane">
            <summary>
            Gets the TCP plane in world coordinate space.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.Tool">
            <summary>
            Gets or sets the Robot Tool.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.ExternalAxes">
            <summary>
            Gets or sets the attached external axes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.InverseKinematics">
            <summary>
            Gets the Inverse Kinematics of this Robot. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.ForwardKinematics">
            <summary>
            Gets the Forward Kinimatics of this Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.ExternalAxisPlanes">
            <summary>
            Gets the external axis planes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.ExternalAxisLimits">
            <summary>
            Gets the external axis limits.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.NumberOfAxes">
            <summary>
            Gets the number of axes for the mechanical unit.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.LowerArmLength">
            <summary>
            Gets the length of the lower arm.
            </summary>
            <returns> The length of the lower arm. </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.UpperArmLength">
            <summary>
            Gets the length of the upper arm.
            </summary>
            <returns> The length of the upper arm. </returns>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.ElbowLength">
            <summary>
            Gets the total length of the elbow.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.A1">
            <summary>
            Gets the OPW kinematics parameter A1.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.A2">
            <summary>
            Gets the OPW kinematics parameter A2.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.A3">
            <summary>
            Gets the wrist offset kinematics parameter A3.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.B">
            <summary>
            Gets the OPW kinematics parameter B.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.C1">
            <summary>
            Gets the OPW kinematics parameter C1.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.C2">
            <summary>
            Gets the OPW kinematics parameter C2.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.C3">
            <summary>
            Gets the OPW kinematics parameter C3.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Definitions.Robot.C4">
            <summary>
            Gets the OPW kinematics parameter C4.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Kinematics.InverseKinematics">
            <summary>
            Represent the Inverse Kinematics for a 6-axis spherical Robot and its attached external axes.
            </summary>
            <remarks>
            Solution order:
            
            Sol.    Wrist center            Wrist center            Axis 5 angle
            Cfx     relative to axis 1      relative to lower arm
                    
            0       In front of             In front of             Positive
            1       In front of             In front of             Negative
            2       In front of             Behind                  Positive
            3       In front of             Behind                  Negative     
            4       Behind                  In front of             Positive
            5       Behind                  In front of             Negative
            6       Behind                  Behind                  Positive
            7       Behind                  Behind                  Negative
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.#ctor">
            <summary>
            Initializes an empty instance of the Inverse Kinematics class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.#ctor(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Initializes a new instance of the Inverse Kinematics class.
            </summary>
            <param name="robot"> The Robot. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.#ctor(RobotComponents.ABB.Kinematics.InverseKinematics)">
            <summary>
            Initializes a new instance of the Inverse Kinematics class by duplicating an existing Inverse Kinematics instance. 
            </summary>
            <param name="inverseKinematics"> The Inverse Kinematics instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.Duplicate">
            <summary>
            Returns an exact duplicate of this Inverse Kinematics instance.
            </summary>
            <returns> A deep copy of the Inverse Kinematics instance. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.Initialize">
            <summary>
            Initialize the fields to construct a valid Inverse Kinematics instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.ReInitialize">
            <summary>
            Reinitialize all the fields to construct a valid Inverse Kinematics object. 
            </summary>
            <remarks>
            This method also resets the solution. The method Calculate() has to be called to obtain a new solution. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.Calculate(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Calculates the inverse kinematics solution.
            </summary>
            <param name="movement"> The movement to calculate the solution for. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.SetMovement(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Sets the movement and associated fields.
            </summary>
            <param name="movement"> The movement to be set. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.CalculateRobotJointPosition">
            <summary>
            Calculates the Robot Joint Position of the Inverse Kinematics solution.
            </summary>
            <remarks>
            This method does not check the internal axis limits.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.CalculateClosestRobotJointPosition(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Calculates and returns the closest Robot Joint Position to a given previous Robot Joint Position.
            </summary>
            <remarks>
            This methods sets and returns the closest Robot Joint Poistion insides this Inverse Kinematics object. 
            You first have to calculate the Inverse Kinematics solution before you call this method. 
            This method is typically used for using Linear and Joint Configuration control inside the Path Generator.
            </remarks>
            <param name="prevJointPosition"> The previous Robot Joint Position. </param>
            <returns> The closest Robot Joint Position. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.CalculateExternalJointPosition(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Calculates the External Joint Position for a given movement.
            </summary>
            <param name="movement"> The movement to calculate the external joint position for. </param>
            <remarks>
            Interally used in situation where only the external joint positions needs to be 
            computed and not the robot joint position. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.CalculateExternalJointPosition">
            <summary>
            Calculates the External Joint Position of the Inverse Kinematics solution.
            </summary>
            <remarks>
            This method does not check the external axis limits. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.ClearCurrentSolutions">
            <summary>
            Clears the lists with the current solutions.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.ResetRobotJointPositions">
            <summary>
            Resets the Robot Joint Position solutions
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.ResetExternalJointPosition">
            <summary>
            Resest the the External Joint Position solution
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.GetEndPlanes">
            <summary>
            Calculates the end planes of joint 6.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.GetPositionPlane">
            <summary>
            Calculates the base position of the robot in world coordinate space if it is moved by an external axis.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.CheckInternalAxisLimits">
            <summary>
            Checks if the positions of the robot axes are inside its limits.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.InverseKinematics.CheckExternalAxisLimits">
            <summary>
            Checks if the positions of the external axes are inside its limits.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.Robot">
            <summary>
            Gets or sets the Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.RobotTool">
            <summary>
            Gets the tool used by the this Inverse Kinematics.
            </summary>
            <remarks>
            By default the tool attached to the robot is used. 
            If a tool is set as a property of the movement, this tool will be used. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.RobotJointPositions">
            <summary>
            Gets the eight latest calculated Robot Joint Positions.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.RobotJointPosition">
            <summary>
            Gets the latest calculated Robot Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.ExternalJointPosition">
            <summary>
            Gets the latest calculated External Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.ErrorText">
            <summary>
            Gets the collected error messages.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.InverseKinematics.IsInLimits">
            <summary>
            Gets a value indicating whether or not the internal and external values are within their limits.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Kinematics.ForwardKinematics">
            <summary>
            Represent the Forward Kinematics for a 6-axis spherical Robot and its attached external axes. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.#ctor">
            <summary>
            Initializes an empty instance of the Forward Kinematics class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.#ctor(RobotComponents.ABB.Definitions.Robot,System.Boolean)">
            <summary>
            Initializes a new instance of the Forward Kinematics class.
            </summary>
            <param name="robot"> The Robot. </param>
            <param name="hideMesh"> Specifies whether the mesh will be supressed. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.#ctor(RobotComponents.ABB.Kinematics.ForwardKinematics)">
            <summary>
            Initializes a new instance of the Forward Kinematics class by duplicating an existing Forward Kinematics instance. 
            </summary>
            <param name="forwardKinematics"> The Forward Kinematics instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.Duplicate">
            <summary>
            Returns an exact duplicate of this Forward Kinematics instance.
            </summary>
            <returns> 
            A deep copy of the Forward Kinematics instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.ReInitialize">
            <summary>
            Reinitialize all the fields to construct a valid Forward Kinematics object. 
            </summary>
            <remarks>
            This method also resets the solution. The method Calculate() has to be called to obtain a new solution. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.Calculate">
            <summary>
            Calculates the forward kinematics solution with the Joint Positions stored inside this Forward Kinematics instance.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.Calculate(RobotComponents.ABB.Actions.Declarations.RobotJointPosition)">
            <summary>
            Calculates the forward kinematics solution with the given Robot Joint Positions and a default External Joint Position (9e9).
            </summary>
            <param name="robotJointPosition"> The Robot Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.Calculate(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition)">
            <summary>
            Calculates the forward kinematics solution with the given Joint Positions.
            </summary>
            <param name="robotJointPosition"> The Robot Joint Position. </param>
            <param name="externalJointPosition"> The External Joint Position. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.Calculate(RobotComponents.ABB.Actions.Declarations.JointTarget)">
            <summary>
            Calculates the forward kinematics solution with the given Joint Target.
            </summary>
            <param name="jointTarget"> The Joint Target. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.CalculateExternalPlanes">
            <summary>
            Calculates the positions of the external axis planes.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.CalculateRobotAxisPlanes">
            <summary>
            Calculates the positipn of the robot axis planes and TCP plane.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.PoseMeshes">
            <summary>
            Transforms the robot and external axis meshes.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.GetBoundingBox(System.Boolean)">
            <summary>
            Returns the Bounding Box of the posed meshes.
            </summary>
            <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>
            <returns> 
            The Bounding Box. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.CheckInternalAxisLimits">
            <summary>
            Checks if the positions of the robot axes are inside its limits.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.ForwardKinematics.CheckExternalAxisLimits">
            <summary>
            Checks if the positions of the external logical axes are inside its limits.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.Robot">
            <summary>
            Gets or sets the Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.PosedRobotMeshes">
            <summary>
            Gets the latest calculated posed internal axis meshes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.PosedExternalAxisMeshes">
            <summary>
            Gets the latest calculated posed external axis meshes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.RobotTransforms">
            <summary>
            Gets the latest calculated robot transformations. 
            </summary>
            <remarks>
            This array contains seven transformations. The transformation of the base and the six joints. 
            Use the last transformation (joint 6) to transform the tool and TCP plane. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.ExternalAxisTransforms">
            <summary>
            Gets the latest calculated external axis transformations.
            </summary>
            <remarks>
            Contains a transformation for each mesh. 
            Including a zero transform of the base mesh of the external axis.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.PosedExternalAxisPlanes">
            <summary>
            Gets the latest calculated posed external axis planes.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.ErrorText">
            <summary>
            Gets the collected error messages.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.TCPPlane">
            <summary>
            Gets the latest calculated posed TCP plane of the robot tool. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.IsInLimits">
            <summary>
            Gets a value indicating whether or not the internal and external values are within their limits.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.ForwardKinematics.HideMesh">
            <summary>
            Gets or sets a value indicating whether the posed meshed wil be calculated. 
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Kinematics.PathGenerator">
            <summary>
            Represent the Path Generator.
            </summary>
            <remarks>
            This class is used to approximate of the path the Robot will follow for a given set of Actions. 
            Speed Datas and Zone Datas are neglected. 
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.#ctor">
            <summary>
            Initializes an empty instance of the Path Generator class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.#ctor(RobotComponents.ABB.Definitions.Robot)">
            <summary>
            Initializes a new instance of the Path Generator class.
            </summary>
            <param name="robot"> The Robot to generate the path for. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns> 
            A string that represents the current object. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.Reset">
            <summary>
            Resets / clears the current solution.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.Calculate(System.Collections.Generic.IList{RobotComponents.ABB.Actions.IAction},System.Int32)">
            <summary>
            Calculates the path from a list with Actions.
            </summary>
            <param name="actions"> The list with Actions. </param>
            <param name="interpolations"> The amount of interpolations between two targets. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.SetRobotTool(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Sets the correct Robot Tool for the defined movement.
            </summary>
            <param name="movement"> The Movement to set the Robot Tool for. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.JointMovementFromJointTarget(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Calculates the interpolated path of a joint movement from a Joint Target. 
            </summary>
            <param name="movement"> The movement with as Target a Joint Target. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.JointMovementFromRobotTarget(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Calculates the interpolated path of a joint movement from a Robot Target. 
            </summary>
            <param name="movement"> The movement with as Target a Robot Target. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.LinearMovementFromRobotTarget(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Calculates the interpolated path for a linear movement.
            </summary>
            <param name="movement"> The movement as a linear movement type. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.CircularMovementFromRobotTarget(RobotComponents.ABB.Actions.Instructions.Movement)">
            <summary>
            Calculates the interpolated path for a circular movement.
            </summary>
            <param name="movement"> The movement as a linear movement type. </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.InterpolateJointMovement(RobotComponents.ABB.Actions.Declarations.RobotJointPosition,RobotComponents.ABB.Actions.Declarations.ExternalJointPosition,RobotComponents.ABB.Actions.Instructions.Movement,System.Boolean)">
            <summary>
            Calculates the interpolated path for a joint movement.
            </summary>
            <param name="towardsRobotJointPosition"> The final Robot Joint Position of the joint movement. </param>
            <param name="towardsExternalJointPosition"> The final External Joint Position of the joint movement. </param>
            <param name="movement"> The movement that belongs to the given joint positions. </param>
            <param name="isInLimits"> Indicates whether or not the calculated solution is within limits </param>
        </member>
        <member name="M:RobotComponents.ABB.Kinematics.PathGenerator.CheckFirstMovement(System.Collections.Generic.IList{RobotComponents.ABB.Actions.IAction})">
            <summary>
            Checks whether the first movement type is an absolute joint movement. 
            </summary>
            <remarks>
            Returns true if no movements are defined. 
            </remarks>
            <returns> 
            Specifies whether the first movement type is an absolute joint movement. 
            </returns>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.Robot">
            <summary>
            Gets the Robot.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.Planes">
            <summary>
            Gets the list with TCP planes the path follows.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.Paths">
            <summary>
            Gets the path curve as list with curve.
            </summary>
            <remarks>
            For every move instruction a curve is constructed. 
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.Movements">
            <summary>
            Gets the calculated Movements.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.RobotJointPositions">
            <summary>
            Gets the calculated Robot Joint Positions.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.ExternalJointPositions">
            <summary>
            Gets the calculated External Joint Positions. 
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.IsInLimits">
            <summary>
            Gets the value indicating whether or not the internal and external values are within their limits.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.ErrorText">
            <summary>
            Gets the collected error messages.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Kinematics.PathGenerator.IsFirstMovementMoveAbsJ">
            <summary>
            Gets a value indicating whether or not the first movement is an Absolute Joint Movement.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Utils.RobotToolCalibration">
            <summary>
            Represents the Robot Tool Calibration class.
            </summary>
            <remarks>
            This class uses Newton's method and numerical differentiation to calculate the TCP from given Joint Positions. 
            If desired, the parameters for this optimization can be changed via the properties of this class.
            </remarks>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.#ctor">
            <summary>
            Initializes an empty instance of the Robot Tool Calibration class.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.#ctor(RobotComponents.ABB.Definitions.Robot,System.Collections.Generic.IList{RobotComponents.ABB.Actions.Declarations.RobotJointPosition})">
            <summary>
            Initializes a new instance of the Robot Tool Calibration class from given Robot Joint Positions..
            </summary>
            <remarks>
            The External Joint Positions are set with default values (9e9).
            </remarks>
            <param name="robot"> The Robot the Joint Positions are given for. </param>
            <param name="robotJointPositions"> The Robot Joint Positions as a list. </param>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.#ctor(RobotComponents.ABB.Definitions.Robot,System.Collections.Generic.IList{RobotComponents.ABB.Actions.Declarations.RobotJointPosition},System.Collections.Generic.IList{RobotComponents.ABB.Actions.Declarations.ExternalJointPosition})">
            <summary>
            Initializes a new instance of the Robot Tool Calibration class.
            </summary>
            <param name="robot"> The Robot the Joint Positions are given for. </param>
            <param name="robotJointPositions"> The Robot Joint Positions as a list. </param>
            <param name="externalJointPositions"> The External Joint Positions as a list. </param>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.#ctor(RobotComponents.ABB.Utils.RobotToolCalibration)">
            <summary>
            Initializes a new instance of the Robot Tool Calibration class by duplicating an existing Robot Tool Calibration instance.
            </summary>
            <param name="calibration"> The Robot Tool Calibration instance to duplicate. </param>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.Duplicate">
            <summary>
            Returns an exact duplicate of this Robot Tool Calibration instance.
            </summary>
            <returns> 
            A deep copy of the Robot Tool Calibration instance. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.Initialize">
            <summary>
            Initializes the fields and properties to construct a valid Robot Tool Calibration instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.ReInitialize">
            <summary>
            Reinitializes the fields and properties to construct a valid Robot Tool Calibration instance. 
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.CheckJointPositionsAxisLimits">
            <summary>
            Checks if the given Joint Positions are within the axis limits of the robot.
            </summary>
            <returns> 
            A list with erros messages. When the list is empty, all the joint positions are within the limits. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.Calculate">
            <summary>
            Calculates the Tool Center Point.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.CreateFrames">
            <summary>
            Creates the reference frames (the end planes of the 6th axis for the different positions).
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Utils.RobotToolCalibration.CalculateFunctionValues(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the fuctions values (the errors) for the optimization.
            </summary>
            <param name="x"> The x-coordinate of the TCP point. </param>
            <param name="y"> The y-coordinate of the TCP point. </param>
            <param name="z"> The z-coordinate of the TCP point.</param>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.IsValid">
            <summary>
            Gets a value indicating whether or not the object is valid.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.Robot">
            <summary>
            Gets or sets the Robot that is used for the tool calibration.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.RobotJointPositions">
            <summary>
            Gets or sets the Robot Joint Positions to calculate the TCP from.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.ExternalJointPositions">
            <summary>
            Gets or sets the External Joint Positions to calculate the tool center point from.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.XInitial">
            <summary>
            Gets or sets the initial x-coordinate of the tool center point to start the optimization with.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.YInitial">
            <summary>
            Gets or sets the initial y-coordinate of the tool center point to start the optimization with.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.ZInitial">
            <summary>
            Gets or sets the initial z-coordinate of the tool center point to start the optimization with.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.Iterations">
            <summary>
            Gets or sets the maximum number of iterations of the tool calibation optimization.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.Precision">
            <summary>
            Gets or sets the desired precision of the tool calibraton optimization.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.Damping">
            <summary>
            Gets or sets the damping factor of the tool calibraton optimization.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.Delta">
            <summary>
            Gets or sets the delta of the tool calibraton optimization.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.X">
            <summary>
            Gets the x-coordindate of the tool center point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.Y">
            <summary>
            Gets the y-coordindate of the tool center point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.Z">
            <summary>
            Gets the z-coordindate of the tool center point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.TcpPoint">
            <summary>
            Gets the tool center point.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.TargetPoint">
            <summary>
            Gets the target point in world coordinate space. 
            </summary>
            <remarks>
            This is the average point that is obtained from the given Robot Joint Positions and the calculated TCP.
            </remarks>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.ErrorsX">
            <summary>
            Gets the resulting errors in x-direction for each given Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.ErrorsY">
            <summary>
            Gets the resulting errors in y-direction for each given Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.ErrorsZ">
            <summary>
            Gets the resulting errors in z-direction for each given Joint Position.
            </summary>
        </member>
        <member name="P:RobotComponents.ABB.Utils.RobotToolCalibration.MaximumError">
            <summary>
            Gets the maximum errors in the x, y and z direction as a vector. 
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Utils.HelperMethods">
            <summary>
            Represents general helper methods.
            </summary>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.FlipPlaneX(Rhino.Geometry.Plane)">
            <summary>
            Flips a plane normal to the oposite direction by setting it's x-axis negative.
            </summary>
            <param name="plane"> The plane that needs to be flipped. </param>
            <returns> 
            The flipped plane. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.FlipPlaneY(Rhino.Geometry.Plane)">
            <summary>
            Flips a plane normal to the oposite direction by setting it's y-axis negative.
            </summary>
            <param name="plane"> The plane that needs to be flipped. </param>
            <returns> 
            The flipped plane. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.QuaternionToPlane(Rhino.Geometry.Point3d,Rhino.Geometry.Quaternion)">
            <summary>
            Transforms a Quarternion to a Plane.
            </summary>
            <param name="origin"> The origin of the plane. </param>
            <param name="quat"> The quarternion. </param>
            <returns> 
            The plane obtained with the orientation defined by the quarternion values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.QuaternionToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Quaternion)">
            <summary>
            Transforms a Quarternion to a Plane.
            </summary>
            <param name="refPlane"> The reference plane. </param>
            <param name="origin"> The origin of the new plane. </param>
            <param name="quat"> The quarternion. </param>
            <returns> 
            The plane obtained with the orientation defined by the quarternion values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.QuaternionToPlane(Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Transforms a Quarternion to a Plane.
            </summary>
            <param name="origin"> The origin of the plane. </param>
            <param name="A"> The real part of the quaternion. </param>
            <param name="B"> The first imaginary coefficient of the quaternion. </param>
            <param name="C"> The second imaginary coefficient of the quaternion. </param>
            <param name="D"> The third imaginary coefficient of the quaternion. </param>
            <returns> 
            The plane obtained with the orientation defined by the quarternion values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.QuaternionToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Transforms a Quarternion to a Plane.
            </summary>
            <param name="refPlane"> The reference plane. </param>
            <param name="origin"> The origin of the plane. </param>
            <param name="A"> The real part of the quaternion. </param>
            <param name="B"> The first imaginary coefficient of the quaternion. </param>
            <param name="C"> The second imaginary coefficient of the quaternion. </param>
            <param name="D"> The third imaginary coefficient of the quaternion. </param>
            <returns> 
            The plane obtained with the orientation defined by the quarternion values.
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.QuaternionToPlane(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Transforms a Quarternion to a Plane.
            </summary>
            <param name="x"> The x coordinate of the plane origin. </param>
            <param name="y"> The y coordinate of the plane origin. </param>
            <param name="z"> The z coordinate of the plane origin.</param>
            <param name="A"> The real part of the quaternion. </param>
            <param name="B"> The first imaginary coefficient of the quaternion. </param>
            <param name="C"> The second imaginary coefficient of the quaternion. </param>
            <param name="D"> The third imaginary coefficient of the quaternion. </param>
            <returns> 
            The plane obtained with the orientation defined by the quarternion values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.QuaternionToPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Transforms a Quarternion to a Plane.
            </summary>
            <param name="refPlane"> The reference plane. </param>
            <param name="x"> The x coordinate of the plane origin. </param>
            <param name="y"> The y coordinate of the plane origin. </param>
            <param name="z"> The z coordinate of the plane origin.</param>
            <param name="A"> The real part of the quaternion. </param>
            <param name="B"> The first imaginary coefficient of the quaternion. </param>
            <param name="C"> The second imaginary coefficient of the quaternion. </param>
            <param name="D"> The third imaginary coefficient of the quaternion. </param>
            <returns> 
            The plane obtained with the orientation defined by the quarternion values. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.PlaneToQuaternion(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Transforms a plane to a quarternion.
            </summary>
            <param name="refPlane"> The reference plane. </param>
            <param name="plane"> The plane that should be transformed. </param>
            <returns> 
            The quaternion as a Quaternion. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.PlaneToQuaternion(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Point3d@)">
            <summary>
            Transforms a plane to a quarternion.
            </summary>
            <param name="refPlane"> The reference plane. </param>
            <param name="plane"> The plane that should be transformed. </param>
            <param name="origin"> The origin of the plane oriented based on the reference plane. </param>
            <returns> 
            The quaternion as a Quaternion. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.PlaneToQuaternion(Rhino.Geometry.Plane)">
            <summary>
            Transforms a plane to a quarternion with as reference plane WorldXY.
            </summary>
            <param name="plane"> The plane to should be transformed. </param>
            <returns> 
            The quaternion. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.DotProduct(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
            <param name="quat1"> The first quaternion. </param>
            <param name="quat2"> The second quaternion. </param>
            <returns> The dot product. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurence in a string with a new text. 
            </summary>
            <param name="text"> The text the search and replace in. </param>
            <param name="search"> The text to search for. </param>
            <param name="replace"> The new text. </param>
            <returns> 
            Returns a new string with replaced text. 
            </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.Slerp(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Interpolates between two quaternions using spherical linear interpolation.
            </summary>
            <param name="quat1"> The first quaternion. </param>
            <param name="quat2"> The second quaternion. </param>
            <param name="t"> The interpolation parameter in the range [0, 1]. </param>
            <returns> The interpolated quaternion. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.Lerp(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Interpolates between two quaternions using linear interpolation.
            </summary>
            <param name="quat1"> The first quaternion. </param>
            <param name="quat2"> The second quaternion. </param>
            <param name="t"> The interpolation parameter in the range [0, 1]. </param>
            <returns> The interpolated quaternion. </returns>
        </member>
        <member name="M:RobotComponents.ABB.Utils.HelperMethods.SetRapidDataFromString(RobotComponents.ABB.Actions.Declarations.IDeclaration,System.String,System.String[]@)">
            <summary>
            Sets the scope, variable type and variable name from a RAPID data string and outputs the values. 
            </summary>
            <remarks>
            This method is used to parse declarations from a RAPID data string. 
            The values are processed inside the different IDeclaration classes. 
            </remarks>
            <param name="declaration"> The declaration to set the values. </param>
            <param name="rapidData"> The RAPID data string. </param>
            <param name="values"> The values from the RAPID data string. </param>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.AxisType">
            <summary>
            Defines if the axis moves linear or rotational.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.AxisType.LINEAR">
            <summary>
            Linear motion
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.AxisType.ROTATIONAL">
            <summary>
            Rotational motion
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.MovementType">
            <summary>
            Defines the movement type.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.MovementType.MoveAbsJ">
            <summary>
            Absolute joint movement
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.MovementType.MoveL">
            <summary>
            Linear Movement
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.MovementType.MoveJ">
            <summary>
            Joint Movement
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.MovementType.MoveC">
            <summary>
            Ciclular Movement
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.CirPathMode">
            <summary>
            Dfines the circle path mode type. 
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CirPathMode.PathFrame">
            <summary>
            Standard mode for tool reorientation in the actual path frame. 
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CirPathMode.ObjectFrame">
            <summary>
            Modified mode for tool reorientation in actual object frame.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CirPathMode.CirPointOri">
            <summary>
            Modified mode for tool reorientation from the start point via the programmed CirPoint.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CirPathMode.Wrist45">
            <summary>
            Modified mode such that the projection of the tool’s z-axis onto the cut plane will follow the programmed circle segment. Only wrist axes 4 and 5 are used.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CirPathMode.Wrist46">
            <summary>
            Modified mode such that the projection of the tool’s z-axis onto the cut plane will follow the programmed circle segment. Only wrist axes 4 and 6 are used.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CirPathMode.Wrist56">
            <summary>
            Modified mode such that the projection of the tool’s z-axis onto the cut plane will follow the programmed circle segment. Only wrist axes 5 and 6 are used.
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.CodeType">
            <summary>
            Defines the code type.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CodeType.Instruction">
            <summary>
            Instruction
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.CodeType.Declaration">
            <summary>
            Declaration
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.Scope">
            <summary>
            Defines the scope of the declaration.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.Scope.GLOBAL">
            <summary>
            Global level
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.Scope.LOCAL">
            <summary>
            Local level
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.Scope.TASK">
            <summary>
            Task level
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.VariableType">
            <summary>
            Defines the variable type of the declaration.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.VariableType.PERS">
            <summary>
            Persistent data type
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.VariableType.VAR">
            <summary>
            Variable data type
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.VariableType.CONST">
            <summary>
            Constant data type
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.InequalitySymbol">
            <summary>
            Defines inequalities (less than, greater than)
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.InequalitySymbol.LT">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.InequalitySymbol.GT">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.PredefinedSpeedData">
            <summary>
            Defines predefined speeddata values.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v5">
            <summary>
            Predefined speeddata v5
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v10">
            <summary>
            Predefined speeddata v10
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v20">
            <summary>
            Predefined speeddata v20
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v30">
            <summary>
            Predefined speeddata v30
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v40">
            <summary>
            Predefined speeddata v40
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v50">
            <summary>
            Predefined speeddata v50
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v60">
            <summary>
            Predefined speeddata v60
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v80">
            <summary>
            Predefined speeddata v80
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v100">
            <summary>
            Predefined speeddata v100
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v150">
            <summary>
            Predefined speeddata v150
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v200">
            <summary>
            Predefined speeddata v200
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v300">
            <summary>
            Predefined speeddata v300
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v400">
            <summary>
            Predefined speeddata v400
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v500">
            <summary>
            Predefined speeddata v500
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v600">
            <summary>
            Predefined speeddata v600
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v800">
            <summary>
            Predefined speeddata v800
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v1000">
            <summary>
            Predefined speeddata v1000
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v1500">
            <summary>
            Predefined speeddata v1500
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v2000">
            <summary>
            Predefined speeddata v2000
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v2500">
            <summary>
            Predefined speeddata v2500
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v3000">
            <summary>
            Predefined speeddata v3000
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v4000">
            <summary>
            Predefined speeddata v4000
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v5000">
            <summary>
            Predefined speeddata v5000
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v6000">
            <summary>
            Predefined speeddata v6000
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedSpeedData.v7000">
            <summary>
            Predefined speeddata v7000
            </summary>
        </member>
        <member name="T:RobotComponents.ABB.Enumerations.PredefinedZoneData">
            <summary>
            Defines predefined zonedata values.
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.fine">
            <summary>
            Predefined zonedata fine
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z0">
            <summary>
            Predefined zonedata z0
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z1">
            <summary>
            Predefined zonedata z1
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z5">
            <summary>
            Predefined zonedata z5
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z10">
            <summary>
            Predefined zonedata z10
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z15">
            <summary>
            Predefined zonedata z15
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z20">
            <summary>
            Predefined zonedata z20
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z30">
            <summary>
            Predefined zonedata z30
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z40">
            <summary>
            Predefined zonedata z40
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z50">
            <summary>
            Predefined zonedata z50
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z60">
            <summary>
            Predefined zonedata z60
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z80">
            <summary>
            Predefined zonedata z80
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z100">
            <summary>
            Predefined zonedata z100
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z150">
            <summary>
            Predefined zonedata z15-
            </summary>
        </member>
        <member name="F:RobotComponents.ABB.Enumerations.PredefinedZoneData.z200">
            <summary>
            Predefined zonedata z200
            </summary>
        </member>
    </members>
</doc>
